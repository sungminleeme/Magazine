{"ast":null,"code":"import { createAction, handleActions } from \"redux-actions\";\nimport { produce } from \"immer\";\nimport { firestore } from \"../../shared/firebase\";\nimport { act } from 'react-dom/cjs/react-dom-test-utils.production.min';\nconst SET_POST = \"SET_POST\";\nconst ADD_POST = \"ADD_POST\";\nconst setPost = createAction(SET_POST, post_list => ({\n  post_list\n}));\nconst addPost = createAction(ADD_POST, post => ({\n  post\n}));\nconst initialState = {\n  list: []\n};\nconst initialPost = {\n  id: 0,\n  user_info: {\n    user_name: \"mean0\",\n    user_profile: \"https://likerdo-bucket-list.s3.ap-northeast-2.amazonaws.com/yui.jpg\"\n  },\n  image_url: \"https://likerdo-bucket-list.s3.ap-northeast-2.amazonaws.com/yui.jpg\",\n  contents: \"강아지네요!\",\n  comment_cnt: 10,\n  insert_dt: \"2021-02-27 10:00:00\"\n};\n\nconst getPostFB = () => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    const postDB = firestore.collection(\"post\");\n    postDB.get().then(docs => {\n      let post_list = [];\n      docs.forEach(doc => {\n        let _post = doc.data(); // ['commenct_cnt', 'contents', ..] reduce 함수 공부 /3-3강 18분 설명\n\n\n        let post = Object.keys(_post).reduce((acc, cur) => {\n          if (cur.indexOf(\"user_\") !== -1) {\n            return { ...acc,\n              user_info: { ...acc.user_info,\n                [cur]: _post[cur]\n              }\n            };\n          }\n\n          return { ...acc,\n            [cur]: _post[cur]\n          };\n        }, {\n          id: doc.id,\n          user_info: {}\n        }); // let _post = {     id: doc.id,     ...doc.data() }; let post = {     id:\n        // doc.id,     user_info: {         user_name: _post.user_name,\n        // user_profile: _post.user_profile,         user_id: _post.user_id,     },\n        // image_url: _post.image_url,     contents: _post.contents,     comment_cnt:\n        // _post.comment_cnt,     insert_dt: _post.insert_dt, }; post_list.push(post);\n\n        post_list.push(post);\n      });\n      console.log(post_list);\n      dispatch(setPost(post_list));\n    });\n  };\n}; // reducer draft 검색하기\n\n\nexport default handleActions({\n  [SET_POST]: (state, action) => produce(state, draft => {\n    draft.list = action.payload.post_list;\n  }),\n  [ADD_POST]: (state, action) => produce(state, draft => {})\n}, initialState); // action creator export\n\nconst actionCreators = {\n  setPost,\n  addPost,\n  getPostFB\n};\nexport { actionCreators };","map":{"version":3,"sources":["/Users/a111/Desktop/무제 폴더 2/image-community /src/redux/modules/post.js"],"names":["createAction","handleActions","produce","firestore","act","SET_POST","ADD_POST","setPost","post_list","addPost","post","initialState","list","initialPost","id","user_info","user_name","user_profile","image_url","contents","comment_cnt","insert_dt","getPostFB","dispatch","getState","history","postDB","collection","get","then","docs","forEach","doc","_post","data","Object","keys","reduce","acc","cur","indexOf","push","console","log","state","action","draft","payload","actionCreators"],"mappings":"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","sourcesContent":["import {createAction, handleActions} from \"redux-actions\";\nimport {produce} from \"immer\";\nimport {firestore} from \"../../shared/firebase\";\nimport {act} from 'react-dom/cjs/react-dom-test-utils.production.min';\n\nconst SET_POST = \"SET_POST\";\nconst ADD_POST = \"ADD_POST\";\n\nconst setPost = createAction(SET_POST, (post_list) => ({post_list}));\nconst addPost = createAction(ADD_POST, (post) => ({post}));\n\nconst initialState = {\n    list: []\n}\n\nconst initialPost = {\n    id: 0,\n    user_info: {\n        user_name: \"mean0\",\n        user_profile: \"https://likerdo-bucket-list.s3.ap-northeast-2.amazonaws.com/yui.jpg\"\n    },\n    image_url: \"https://likerdo-bucket-list.s3.ap-northeast-2.amazonaws.com/yui.jpg\",\n    contents: \"강아지네요!\",\n    comment_cnt: 10,\n    insert_dt: \"2021-02-27 10:00:00\"\n}\n\nconst getPostFB = () => {\n    return function (dispatch, getState, {history}) {\n        const postDB = firestore.collection(\"post\");\n\n        postDB\n            .get()\n            .then((docs) => {\n                let post_list = [];\n                docs.forEach((doc) => {\n                    let _post = doc.data();\n\n                    // ['commenct_cnt', 'contents', ..] reduce 함수 공부 /3-3강 18분 설명\n                    let post = Object\n                        .keys(_post)\n                        .reduce((acc, cur) => {\n\n                            if (cur.indexOf(\"user_\") !== -1) {\n                                return {\n                                    ...acc,\n                                    user_info: {\n                                        ...acc.user_info,\n                                        [cur]: _post[cur]\n                                    }\n                                };\n                            }\n                            return {\n                                ...acc,\n                                [cur]: _post[cur]\n                            }\n                        }, {\n                            id: doc.id,\n                            user_info: {}\n                        });\n\n                    // let _post = {     id: doc.id,     ...doc.data() }; let post = {     id:\n                    // doc.id,     user_info: {         user_name: _post.user_name,\n                    // user_profile: _post.user_profile,         user_id: _post.user_id,     },\n                    // image_url: _post.image_url,     contents: _post.contents,     comment_cnt:\n                    // _post.comment_cnt,     insert_dt: _post.insert_dt, }; post_list.push(post);\n                        post_list.push(post);\n                })\n                console.log(post_list);\n\n                dispatch(setPost(post_list));\n            })\n    }\n}\n\n// reducer draft 검색하기\nexport default handleActions({\n    [SET_POST]: (state, action) => produce(state, (draft) => {\n        draft.list = action.payload.post_list;\n    }),\n\n    [ADD_POST]: (state, action) => produce(state, (draft) => {})\n}, initialState);\n\n// action creator export\nconst actionCreators = {\n    setPost,\n    addPost,\n    getPostFB\n};\n\nexport {\n    actionCreators\n};"]},"metadata":{},"sourceType":"module"}