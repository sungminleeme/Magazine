{"ast":null,"code":"import { createAction, handleActions } from \"redux-actions\";\nimport produce from \"immer\";\nimport { storage } from \"../../shared/firebase\";\nconst UPLOADING = \"UPLOADING\";\nconst UPLOAD_IMAGE = \"UPLOAD_IMAGE\";\nconst SET_PREVIEW = \"SET_PREVIEW\";\nconst uploading = createAction(UPLOADING, uploading => ({\n  uploading\n}));\nconst uploadImage = createAction(UPLOAD_IMAGE, image_url => ({\n  image_url\n}));\nconst setPreview = createAction(SET_PREVIEW, preview => ({\n  preview\n}));\nconst initialState = {\n  image_url: '',\n  uploading: false,\n  preview: null\n};\n\nconst uploadImageFB = image => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    dispatch(uploading(true));\n\n    const _upload = storage.ref(`images/${image.name}`).put(image);\n\n    _upload.then(snapshot => {\n      console.log(snapshot);\n      snapshot.ref.getDownloadURL().then(url => {\n        dispatch(uploadImage(url));\n        console.log(url);\n      });\n    });\n  };\n};\n\nexport default handleActions({\n  [UPLOAD_IMAGE]: (state, action) => produce(state, draft => {\n    draft.image_url = action.payload.image_url;\n    draft.uploading = false;\n  }),\n  [UPLOADING]: (state, action) => produce(state, draft => {\n    draft.uploading = action.payload.uploading;\n  }),\n  [SET_PREVIEW]: (state, action) => produce(state, draft => {\n    draft.preview = action.payload.preview;\n  })\n}, initialState);\nconst actionCreators = {\n  uploadImage,\n  uploadImageFB,\n  setPreview\n};\nexport { actionCreators };","map":{"version":3,"sources":["/Users/a111/Desktop/무제 폴더 2/image-community /src/redux/modules/image.js"],"names":["createAction","handleActions","produce","storage","UPLOADING","UPLOAD_IMAGE","SET_PREVIEW","uploading","uploadImage","image_url","setPreview","preview","initialState","uploadImageFB","image","dispatch","getState","history","_upload","ref","name","put","then","snapshot","console","log","getDownloadURL","url","state","action","draft","payload","actionCreators"],"mappings":"AAAA,SAAQA,YAAR,EAAsBC,aAAtB,QAA0C,eAA1C;AACA,OAAOC,OAAP,MAAoB,OAApB;AAEA,SAAQC,OAAR,QAAsB,uBAAtB;AAEA,MAAMC,SAAS,GAAG,WAAlB;AACA,MAAMC,YAAY,GAAG,cAArB;AACA,MAAMC,WAAW,GAAG,aAApB;AAEA,MAAMC,SAAS,GAAGP,YAAY,CAACI,SAAD,EAAaG,SAAD,KAAgB;AAACA,EAAAA;AAAD,CAAhB,CAAZ,CAA9B;AACA,MAAMC,WAAW,GAAGR,YAAY,CAACK,YAAD,EAAgBI,SAAD,KAAgB;AAACA,EAAAA;AAAD,CAAhB,CAAf,CAAhC;AACA,MAAMC,UAAU,GAAGV,YAAY,CAACM,WAAD,EAAeK,OAAD,KAAc;AAACA,EAAAA;AAAD,CAAd,CAAd,CAA/B;AAEA,MAAMC,YAAY,GAAG;AACjBH,EAAAA,SAAS,EAAE,EADM;AAEjBF,EAAAA,SAAS,EAAE,KAFM;AAGjBI,EAAAA,OAAO,EAAE;AAHQ,CAArB;;AAMA,MAAME,aAAa,GAAIC,KAAD,IAAW;AAC7B,SAAO,UAASC,QAAT,EAAmBC,QAAnB,EAA6B;AAACC,IAAAA;AAAD,GAA7B,EAAuC;AAE1CF,IAAAA,QAAQ,CAACR,SAAS,CAAC,IAAD,CAAV,CAAR;;AAEC,UAAMW,OAAO,GAAGf,OAAO,CAACgB,GAAR,CAAa,UAASL,KAAK,CAACM,IAAK,EAAjC,EAAoCC,GAApC,CAAwCP,KAAxC,CAAhB;;AAEAI,IAAAA,OAAO,CAACI,IAAR,CAAcC,QAAD,IAAc;AACzBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AAEAA,MAAAA,QAAQ,CAACJ,GAAT,CAAaO,cAAb,GAA8BJ,IAA9B,CAAoCK,GAAD,IAAS;AACxCZ,QAAAA,QAAQ,CAACP,WAAW,CAACmB,GAAD,CAAZ,CAAR;AACFH,QAAAA,OAAO,CAACC,GAAR,CAAYE,GAAZ;AACD,OAHD;AAID,KAPD;AASJ,GAfD;AAgBH,CAjBD;;AAmBA,eAAe1B,aAAa,CAAC;AACzB,GAACI,YAAD,GAAgB,CAACuB,KAAD,EAAQC,MAAR,KAAmB3B,OAAO,CAAC0B,KAAD,EAASE,KAAD,IAAW;AACzDA,IAAAA,KAAK,CAACrB,SAAN,GAAkBoB,MAAM,CAACE,OAAP,CAAetB,SAAjC;AACAqB,IAAAA,KAAK,CAACvB,SAAN,GAAkB,KAAlB;AACH,GAHyC,CADjB;AAKzB,GAACH,SAAD,GAAa,CAACwB,KAAD,EAAQC,MAAR,KAAmB3B,OAAO,CAAC0B,KAAD,EAASE,KAAD,IAAW;AACtDA,IAAAA,KAAK,CAACvB,SAAN,GAAkBsB,MAAM,CAACE,OAAP,CAAexB,SAAjC;AACH,GAFsC,CALd;AAQzB,GAACD,WAAD,GAAe,CAACsB,KAAD,EAAQC,MAAR,KAAmB3B,OAAO,CAAC0B,KAAD,EAASE,KAAD,IAAW;AAC1DA,IAAAA,KAAK,CAACnB,OAAN,GAAgBkB,MAAM,CAACE,OAAP,CAAepB,OAA/B;AACD,GAFwC;AARhB,CAAD,EAWzBC,YAXyB,CAA5B;AAaA,MAAMoB,cAAc,GAAG;AACrBxB,EAAAA,WADqB;AAErBK,EAAAA,aAFqB;AAGrBH,EAAAA;AAHqB,CAAvB;AAMA,SAAQsB,cAAR","sourcesContent":["import {createAction, handleActions} from \"redux-actions\";\nimport produce from \"immer\";\n\nimport {storage} from \"../../shared/firebase\";\n\nconst UPLOADING = \"UPLOADING\";\nconst UPLOAD_IMAGE = \"UPLOAD_IMAGE\";\nconst SET_PREVIEW = \"SET_PREVIEW\";\n\nconst uploading = createAction(UPLOADING, (uploading) => ({uploading}));\nconst uploadImage = createAction(UPLOAD_IMAGE, (image_url) => ({image_url}));\nconst setPreview = createAction(SET_PREVIEW, (preview) => ({preview}));\n\nconst initialState = {\n    image_url: '',\n    uploading: false,\n    preview: null,\n}\n\nconst uploadImageFB = (image) => {\n    return function(dispatch, getState, {history}){\n        \n        dispatch(uploading(true));\n\n         const _upload = storage.ref(`images/${image.name}`).put(image);\n\n         _upload.then((snapshot) => {\n           console.log(snapshot);\n            \n           snapshot.ref.getDownloadURL().then((url) => {\n               dispatch(uploadImage(url));\n             console.log(url);\n           });\n         });\n\n    }\n}\n\nexport default handleActions({\n    [UPLOAD_IMAGE]: (state, action) => produce(state, (draft) => {\n        draft.image_url = action.payload.image_url;\n        draft.uploading = false;\n    }),\n    [UPLOADING]: (state, action) => produce(state, (draft) => {\n        draft.uploading = action.payload.uploading;\n    }),\n    [SET_PREVIEW]: (state, action) => produce(state, (draft) => {\n      draft.preview = action.payload.preview;\n    })\n}, initialState);\n\nconst actionCreators = {\n  uploadImage,\n  uploadImageFB,\n  setPreview,\n};\n\nexport {actionCreators};\n\n"]},"metadata":{},"sourceType":"module"}