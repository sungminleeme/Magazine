{"ast":null,"code":"import { createAction, handleActions } from \"redux-actions\";\nimport { produce } from \"immer\";\nimport { firestore, storage } from \"../../shared/firebase\";\nimport \"moment\";\nimport moment from \"moment\";\nimport { actionCreators as imageActions } from \"./image\";\nimport { orderBy } from 'lodash';\nconst SET_POST = \"SET_POST\";\nconst ADD_POST = \"ADD_POST\";\nconst EDIT_POST = \"EDIT_POST\";\nconst LOADING = \"LOADING\";\nconst setPost = createAction(SET_POST, post_list => ({\n  post_list\n}));\nconst addPost = createAction(ADD_POST, post => ({\n  post\n}));\nconst editPost = createAction(EDIT_POST, (post_id, post) => ({\n  post_id,\n  post\n}));\nconst loading = createAction(LOADING, is_loading => ({\n  is_loading\n}));\nconst initialState = {\n  list: [],\n  paging: {\n    start: null,\n    next: null,\n    size: 3\n  },\n  is_loading: false\n};\nconst initialPost = {\n  // id: 0, user_info: {     user_name: \"mean0\",     user_profile:\n  // \"https://likerdo-bucket-list.s3.ap-northeast-2.amazonaws.com/yui.jpg\" },\n  image_url: \"https://likerdo-bucket-list.s3.ap-northeast-2.amazonaws.com/yui.jpg\",\n  contents: \"\",\n  comment_cnt: 0,\n  insert_dt: moment().format(\"YYYY-MM-DD hh:mm:ss\")\n};\n\nconst editPostFB = (post_id = null, post = {}) => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    if (!post_id) {\n      console.log(\"게시물 정보가없어요!\");\n      return;\n    }\n\n    const _image = getState().image.preview;\n\n    const _post_idx = getState().post.list.findIndex(p => p.id === post_id);\n\n    const _post = getState().post.list[_post_idx];\n\n    console.log(_post);\n    const postDB = firestore.collection(\"post\");\n\n    if (_image === _post.image_url) {\n      postDB.doc(post_id).update(post).then(doc => {\n        dispatch(editPost(post_id, { ...post\n        }));\n        history.replace(\"/\");\n      });\n      return;\n    } else {\n      const user_id = getState().user.user.uid;\n\n      const _upload = storage.ref(`images/${user_id}_${new Date().getTime()}`).putString(_image, \"data_url\");\n\n      _upload.then(snapshot => {\n        snapshot.ref.getDownloadURL().then(url => {\n          console.log(url);\n          return url;\n        }).then(url => {\n          postDB.doc(post_id).update({ ...post,\n            image_url: url\n          }).then(doc => {\n            dispatch(editPost(post_id, { ...post,\n              image_url: url\n            }));\n            history.replace(\"/\");\n          });\n        }).catch(err => {\n          window.alert(\"앗! 이미지 업로드에 문제가 있어요!\");\n          console.log(\"앗! 이미지 업로드에 문제가 있어요!\", err);\n        });\n      });\n    }\n  };\n};\n\nconst addPostFB = (contents = \"\") => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    const postDB = firestore.collection(\"post\");\n    const _user = getState().user.user;\n    const user_info = {\n      user_name: _user.user_name,\n      user_id: _user.uid,\n      user_profile: _user.user_profile\n    };\n    const _post = { ...initialPost,\n      contents: contents,\n      insert_dt: moment().format(\"YYYY-MM-DD hh:mm:ss\")\n    }; // 잘 만들어졌나 확인해보세요!!\n\n    console.log(_post); // getState()로 store의 상태값에 접근할 수 있어요!\n\n    const _image = getState().image.preview; // 데이터가 어떤 타입인지 확인해봐요!\n\n    console.log(typeof _image); // 파일 이름은 유저의 id와 현재 시간을 밀리초로 넣어줍시다! (혹시라도 중복이 생기지 않도록요!)\n\n    const _upload = storage.ref(`images/${user_info.user_id}_${new Date().getTime()}`).putString(_image, \"data_url\");\n\n    _upload.then(snapshot => {\n      snapshot.ref.getDownloadURL().then(url => {\n        // url을 확인해봐요!\n        console.log(url);\n        dispatch(imageActions.uploadImage(url));\n        return url;\n      }).then(url => {\n        // return으로 넘겨준 값이 잘 넘어왔나요? :) 다시 콘솔로 확인해주기!\n        console.log(url);\n        postDB.add({ ...user_info,\n          ..._post,\n          image_url: url\n        }).then(doc => {\n          // 아이디를 추가해요!\n          let post = {\n            user_info,\n            ..._post,\n            id: doc.id,\n            image_url: url\n          }; // 이제 리덕스에 넣어봅시다.\n\n          dispatch(addPost(post));\n          history.replace(\"/\");\n        }).catch(err => {\n          window.alert(\"앗! 포스트 작성에 문제가 있어요!\");\n          console.log(\"post 작성 실패!\", err);\n        });\n      });\n    }).catch(err => {\n      window.alert(\"앗! 이미지 업로드에 문제가 있어요!\");\n      console.log(err);\n    });\n  };\n};\n\nconst getPostFB = () => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    dispatch(loading(true));\n    const postDB = firestore.collection(\"post\");\n    let query = postDB.orderBy(\"insert_dt\", \"desc\");\n\n    if (start) {\n      query.startAt(start);\n    }\n\n    query.limit(size + 1).get().then(docs => {\n      let post_list = [];\n      docs.forEach(doc => {\n        let _post = doc.data(); // ['commenct_cnt', 'contents', ..] reduce 함수 공부 /3-3강 18분 설명\n\n\n        let post = Object.keys(_post).reduce((acc, cur) => {\n          if (cur.indexOf(\"user_\") !== -1) {\n            return { ...acc,\n              user_info: { ...acc.user_info,\n                [cur]: _post[cur]\n              }\n            };\n          }\n\n          return { ...acc,\n            [cur]: _post[cur]\n          };\n        }, {\n          id: doc.id,\n          user_info: {}\n        });\n        post_list.push(post);\n      });\n      console.log(post_list);\n      dispatch(setPost(post_list));\n    });\n  };\n}; // reducer draft 검색하기\n\n\nexport default handleActions({\n  [SET_POST]: (state, action) => produce(state, draft => {\n    draft.list = action.payload.post_list;\n  }),\n  [ADD_POST]: (state, action) => produce(state, draft => {\n    draft.list.unshift(action.payload.post);\n  }),\n  [EDIT_POST]: (state, action) => produce(state, draft => {\n    let idx = draft.list.findIndex(p => p.id === action.payload.post_id);\n    draft.list[idx] = { ...draft.list[idx],\n      ...action.payload.post\n    };\n  }),\n  [LOADING]: (state, action) => produce(state, draft => {\n    draft.is_loading = action.payload.is_loading;\n  })\n}, initialState); // action creator export\n\nconst actionCreators = {\n  setPost,\n  addPost,\n  getPostFB,\n  addPostFB,\n  editPostFB\n};\nexport { actionCreators };","map":{"version":3,"sources":["/Users/a111/Desktop/무제 폴더 2/image-community /src/redux/modules/post.js"],"names":["createAction","handleActions","produce","firestore","storage","moment","actionCreators","imageActions","orderBy","SET_POST","ADD_POST","EDIT_POST","LOADING","setPost","post_list","addPost","post","editPost","post_id","loading","is_loading","initialState","list","paging","start","next","size","initialPost","image_url","contents","comment_cnt","insert_dt","format","editPostFB","dispatch","getState","history","console","log","_image","image","preview","_post_idx","findIndex","p","id","_post","postDB","collection","doc","update","then","replace","user_id","user","uid","_upload","ref","Date","getTime","putString","snapshot","getDownloadURL","url","catch","err","window","alert","addPostFB","_user","user_info","user_name","user_profile","uploadImage","add","getPostFB","query","startAt","limit","get","docs","forEach","data","Object","keys","reduce","acc","cur","indexOf","push","state","action","draft","payload","unshift","idx"],"mappings":"AAAA,SAAQA,YAAR,EAAsBC,aAAtB,QAA0C,eAA1C;AACA,SAAQC,OAAR,QAAsB,OAAtB;AACA,SAAQC,SAAR,EAAmBC,OAAnB,QAAiC,uBAAjC;AACA,OAAO,QAAP;AACA,OAAOC,MAAP,MAAmB,QAAnB;AAEA,SAAQC,cAAc,IAAIC,YAA1B,QAA6C,SAA7C;AACA,SAASC,OAAT,QAAwB,QAAxB;AAEA,MAAMC,QAAQ,GAAG,UAAjB;AACA,MAAMC,QAAQ,GAAG,UAAjB;AACA,MAAMC,SAAS,GAAG,WAAlB;AACA,MAAMC,OAAO,GAAG,SAAhB;AAEA,MAAMC,OAAO,GAAGb,YAAY,CAACS,QAAD,EAAYK,SAAD,KAAgB;AAACA,EAAAA;AAAD,CAAhB,CAAX,CAA5B;AACA,MAAMC,OAAO,GAAGf,YAAY,CAACU,QAAD,EAAYM,IAAD,KAAW;AAACA,EAAAA;AAAD,CAAX,CAAX,CAA5B;AACA,MAAMC,QAAQ,GAAGjB,YAAY,CAACW,SAAD,EAAY,CAACO,OAAD,EAAUF,IAAV,MAAoB;AAACE,EAAAA,OAAD;AAAUF,EAAAA;AAAV,CAApB,CAAZ,CAA7B;AAEA,MAAMG,OAAO,GAAGnB,YAAY,CAACY,OAAD,EAAWQ,UAAD,KAAiB;AAAEA,EAAAA;AAAF,CAAjB,CAAV,CAA5B;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,IAAI,EAAE,EADW;AAEjBC,EAAAA,MAAM,EAAE;AAACC,IAAAA,KAAK,EAAC,IAAP;AAAaC,IAAAA,IAAI,EAAE,IAAnB;AAAyBC,IAAAA,IAAI,EAAC;AAA9B,GAFS;AAGjBN,EAAAA,UAAU,EAAE;AAHK,CAArB;AAMA,MAAMO,WAAW,GAAG;AAChB;AACA;AACAC,EAAAA,SAAS,EAAE,qEAHK;AAIhBC,EAAAA,QAAQ,EAAE,EAJM;AAKhBC,EAAAA,WAAW,EAAE,CALG;AAMhBC,EAAAA,SAAS,EAAE1B,MAAM,GAAG2B,MAAT,CAAgB,qBAAhB;AANK,CAApB;;AASA,MAAMC,UAAU,GAAG,CAACf,OAAO,GAAG,IAAX,EAAiBF,IAAI,GAAG,EAAxB,KAA+B;AAC9C,SAAO,UAAUkB,QAAV,EAAoBC,QAApB,EAA8B;AAACC,IAAAA;AAAD,GAA9B,EAAyC;AAGhD,QAAG,CAAClB,OAAJ,EAAY;AACRmB,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACA;AACH;;AACD,UAAMC,MAAM,GAAGJ,QAAQ,GAAGK,KAAX,CAAiBC,OAAhC;;AAEA,UAAMC,SAAS,GAAGP,QAAQ,GAAGnB,IAAX,CAAgBM,IAAhB,CAAqBqB,SAArB,CAAgCC,CAAD,IAAOA,CAAC,CAACC,EAAF,KAAS3B,OAA/C,CAAlB;;AACA,UAAM4B,KAAK,GAAGX,QAAQ,GAAGnB,IAAX,CAAgBM,IAAhB,CAAqBoB,SAArB,CAAd;;AAEAL,IAAAA,OAAO,CAACC,GAAR,CAAYQ,KAAZ;AACA,UAAMC,MAAM,GAAG5C,SAAS,CAAC6C,UAAV,CAAqB,MAArB,CAAf;;AAEA,QAAIT,MAAM,KAAKO,KAAK,CAAClB,SAArB,EAAgC;AAC5BmB,MAAAA,MAAM,CACLE,GADD,CACK/B,OADL,EAECgC,MAFD,CAEQlC,IAFR,EAGCmC,IAHD,CAGOF,GAAD,IAAQ;AACVf,QAAAA,QAAQ,CAACjB,QAAQ,CAACC,OAAD,EAAU,EAAE,GAAGF;AAAL,SAAV,CAAT,CAAR;AACAoB,QAAAA,OAAO,CAACgB,OAAR,CAAgB,GAAhB;AACD,OANH;AAQE;AACL,KAVD,MAUK;AACD,YAAMC,OAAO,GAAGlB,QAAQ,GAAGmB,IAAX,CAAgBA,IAAhB,CAAqBC,GAArC;;AACF,YAAMC,OAAO,GAAGpD,OAAO,CACpBqD,GADa,CACR,UAASJ,OAAQ,IAAG,IAAIK,IAAJ,GAAWC,OAAX,EAAqB,EADjC,EAEbC,SAFa,CAEHrB,MAFG,EAEK,UAFL,CAAhB;;AAIAiB,MAAAA,OAAO,CAACL,IAAR,CAAcU,QAAD,IAAc;AACzBA,QAAAA,QAAQ,CAACJ,GAAT,CACGK,cADH,GAEGX,IAFH,CAESY,GAAD,IAAS;AACb1B,UAAAA,OAAO,CAACC,GAAR,CAAYyB,GAAZ;AAEA,iBAAOA,GAAP;AACD,SANH,EAOGZ,IAPH,CAOSY,GAAD,IAAS;AACbhB,UAAAA,MAAM,CACHE,GADH,CACO/B,OADP,EAEGgC,MAFH,CAEU,EAAE,GAAGlC,IAAL;AAAWY,YAAAA,SAAS,EAAEmC;AAAtB,WAFV,EAGGZ,IAHH,CAGSF,GAAD,IAAS;AACbf,YAAAA,QAAQ,CAACjB,QAAQ,CAACC,OAAD,EAAU,EAAE,GAAGF,IAAL;AAAWY,cAAAA,SAAS,EAAEmC;AAAtB,aAAV,CAAT,CAAR;AACA3B,YAAAA,OAAO,CAACgB,OAAR,CAAgB,GAAhB;AACD,WANH;AAOD,SAfH,EAgBGY,KAhBH,CAgBUC,GAAD,IAAS;AACdC,UAAAA,MAAM,CAACC,KAAP,CAAa,sBAAb;AACA9B,UAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoC2B,GAApC;AACD,SAnBH;AAoBC,OArBH;AAsBD;AACH,GAtDE;AAuDH,CAxDD;;AA0DA,MAAMG,SAAS,GAAG,CAACvC,QAAQ,GAAG,EAAZ,KAAoB;AAClC,SAAO,UAAUK,QAAV,EAAoBC,QAApB,EAA8B;AAACC,IAAAA;AAAD,GAA9B,EAAyC;AAC5C,UAAMW,MAAM,GAAG5C,SAAS,CAAC6C,UAAV,CAAqB,MAArB,CAAf;AAEA,UAAMqB,KAAK,GAAGlC,QAAQ,GAAGmB,IAAX,CAAgBA,IAA9B;AAEA,UAAMgB,SAAS,GAAG;AACdC,MAAAA,SAAS,EAAEF,KAAK,CAACE,SADH;AAEdlB,MAAAA,OAAO,EAAEgB,KAAK,CAACd,GAFD;AAGdiB,MAAAA,YAAY,EAAEH,KAAK,CAACG;AAHN,KAAlB;AAKA,UAAM1B,KAAK,GAAG,EACV,GAAGnB,WADO;AAEVE,MAAAA,QAAQ,EAAEA,QAFA;AAGVE,MAAAA,SAAS,EAAE1B,MAAM,GAAG2B,MAAT,CAAgB,qBAAhB;AAHD,KAAd,CAV4C,CAgB5C;;AACAK,IAAAA,OAAO,CAACC,GAAR,CAAYQ,KAAZ,EAjB4C,CAmB5C;;AACA,UAAMP,MAAM,GAAGJ,QAAQ,GAAGK,KAAX,CAAiBC,OAAhC,CApB4C,CAsB5C;;AACAJ,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAOC,MAAnB,EAvB4C,CAyB5C;;AACA,UAAMiB,OAAO,GAAGpD,OAAO,CAClBqD,GADW,CAEP,UAASa,SAAS,CAACjB,OAAQ,IAAG,IAAIK,IAAJ,GAAWC,OAAX,EAAqB,EAF5C,EAIXC,SAJW,CAIDrB,MAJC,EAIO,UAJP,CAAhB;;AAMAiB,IAAAA,OAAO,CACFL,IADL,CACWU,QAAD,IAAc;AAChBA,MAAAA,QAAQ,CACHJ,GADL,CAEKK,cAFL,GAGKX,IAHL,CAGWY,GAAD,IAAS;AACX;AACA1B,QAAAA,OAAO,CAACC,GAAR,CAAYyB,GAAZ;AACA7B,QAAAA,QAAQ,CAAC3B,YAAY,CAACkE,WAAb,CAAyBV,GAAzB,CAAD,CAAR;AACA,eAAOA,GAAP;AACH,OARL,EASKZ,IATL,CASWY,GAAD,IAAS;AACX;AACA1B,QAAAA,OAAO,CAACC,GAAR,CAAYyB,GAAZ;AAEAhB,QAAAA,MAAM,CACD2B,GADL,CACS,EACD,GAAGJ,SADF;AAED,aAAGxB,KAFF;AAGDlB,UAAAA,SAAS,EAAEmC;AAHV,SADT,EAMKZ,IANL,CAMWF,GAAD,IAAS;AACX;AACA,cAAIjC,IAAI,GAAG;AACPsD,YAAAA,SADO;AAEP,eAAGxB,KAFI;AAGPD,YAAAA,EAAE,EAAEI,GAAG,CAACJ,EAHD;AAIPjB,YAAAA,SAAS,EAAEmC;AAJJ,WAAX,CAFW,CAQX;;AACA7B,UAAAA,QAAQ,CAACnB,OAAO,CAACC,IAAD,CAAR,CAAR;AACAoB,UAAAA,OAAO,CAACgB,OAAR,CAAgB,GAAhB;AACH,SAjBL,EAkBKY,KAlBL,CAkBYC,GAAD,IAAS;AACZC,UAAAA,MAAM,CAACC,KAAP,CAAa,qBAAb;AACA9B,UAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2B2B,GAA3B;AACH,SArBL;AAsBH,OAnCL;AAoCH,KAtCL,EAuCKD,KAvCL,CAuCYC,GAAD,IAAS;AACZC,MAAAA,MAAM,CAACC,KAAP,CAAa,sBAAb;AACA9B,MAAAA,OAAO,CAACC,GAAR,CAAY2B,GAAZ;AACH,KA1CL;AA2CH,GA3ED;AA4EH,CA7ED;;AA+EA,MAAMU,SAAS,GAAG,MAAM;AACpB,SAAO,UAAUzC,QAAV,EAAoBC,QAApB,EAA8B;AAACC,IAAAA;AAAD,GAA9B,EAAyC;AAE5CF,IAAAA,QAAQ,CAACf,OAAO,CAAC,IAAD,CAAR,CAAR;AACA,UAAM4B,MAAM,GAAG5C,SAAS,CAAC6C,UAAV,CAAqB,MAArB,CAAf;AAEA,QAAI4B,KAAK,GAAG7B,MAAM,CAACvC,OAAP,CAAe,WAAf,EAA4B,MAA5B,CAAZ;;AAEA,QAAGgB,KAAH,EAAS;AACLoD,MAAAA,KAAK,CAACC,OAAN,CAAcrD,KAAd;AACH;;AAEDoD,IAAAA,KAAK,CACJE,KADD,CACOpD,IAAI,GAAE,CADb,EAECqD,GAFD,GAGC5B,IAHD,CAGM6B,IAAI,IAAI;AACV,UAAIlE,SAAS,GAAG,EAAhB;AACAkE,MAAAA,IAAI,CAACC,OAAL,CAAchC,GAAD,IAAS;AAClB,YAAIH,KAAK,GAAGG,GAAG,CAACiC,IAAJ,EAAZ,CADkB,CAGlB;;;AACA,YAAIlE,IAAI,GAAGmE,MAAM,CACZC,IADM,CACDtC,KADC,EAENuC,MAFM,CAEC,CAACC,GAAD,EAAMC,GAAN,KAAc;AAElB,cAAIA,GAAG,CAACC,OAAJ,CAAY,OAAZ,MAAyB,CAAC,CAA9B,EAAiC;AAC7B,mBAAO,EACH,GAAGF,GADA;AAEHhB,cAAAA,SAAS,EAAE,EACP,GAAGgB,GAAG,CAAChB,SADA;AAEP,iBAACiB,GAAD,GAAOzC,KAAK,CAACyC,GAAD;AAFL;AAFR,aAAP;AAOH;;AACD,iBAAO,EACH,GAAGD,GADA;AAEH,aAACC,GAAD,GAAOzC,KAAK,CAACyC,GAAD;AAFT,WAAP;AAIH,SAjBM,EAiBJ;AACC1C,UAAAA,EAAE,EAAEI,GAAG,CAACJ,EADT;AAECyB,UAAAA,SAAS,EAAE;AAFZ,SAjBI,CAAX;AAqBAxD,QAAAA,SAAS,CAAC2E,IAAV,CAAezE,IAAf;AACH,OA1BD;AA2BAqB,MAAAA,OAAO,CAACC,GAAR,CAAYxB,SAAZ;AAEAoB,MAAAA,QAAQ,CAACrB,OAAO,CAACC,SAAD,CAAR,CAAR;AACH,KAnCD;AAoCH,GA/CD;AAgDH,CAjDD,C,CAmDA;;;AACA,eAAeb,aAAa,CACxB;AACI,GAACQ,QAAD,GAAY,CAACiF,KAAD,EAAQC,MAAR,KACVzF,OAAO,CAACwF,KAAD,EAASE,KAAD,IAAW;AACxBA,IAAAA,KAAK,CAACtE,IAAN,GAAaqE,MAAM,CAACE,OAAP,CAAe/E,SAA5B;AACD,GAFM,CAFb;AAMI,GAACJ,QAAD,GAAY,CAACgF,KAAD,EAAQC,MAAR,KACVzF,OAAO,CAACwF,KAAD,EAASE,KAAD,IAAW;AACxBA,IAAAA,KAAK,CAACtE,IAAN,CAAWwE,OAAX,CAAmBH,MAAM,CAACE,OAAP,CAAe7E,IAAlC;AACD,GAFM,CAPb;AAUI,GAACL,SAAD,GAAa,CAAC+E,KAAD,EAAQC,MAAR,KACXzF,OAAO,CAACwF,KAAD,EAASE,KAAD,IAAW;AACxB,QAAIG,GAAG,GAAGH,KAAK,CAACtE,IAAN,CAAWqB,SAAX,CAAsBC,CAAD,IAAOA,CAAC,CAACC,EAAF,KAAS8C,MAAM,CAACE,OAAP,CAAe3E,OAApD,CAAV;AAEA0E,IAAAA,KAAK,CAACtE,IAAN,CAAWyE,GAAX,IAAkB,EAAE,GAAGH,KAAK,CAACtE,IAAN,CAAWyE,GAAX,CAAL;AAAsB,SAAGJ,MAAM,CAACE,OAAP,CAAe7E;AAAxC,KAAlB;AACD,GAJM,CAXb;AAgBM,GAACJ,OAAD,GAAW,CAAC8E,KAAD,EAAQC,MAAR,KAAmBzF,OAAO,CAACwF,KAAD,EAASE,KAAD,IAAW;AACpDA,IAAAA,KAAK,CAACxE,UAAN,GAAmBuE,MAAM,CAACE,OAAP,CAAezE,UAAlC;AACH,GAFoC;AAhB3C,CADwB,EAqBtBC,YArBsB,CAA5B,C,CAwBA;;AACA,MAAMf,cAAc,GAAG;AACnBO,EAAAA,OADmB;AAEnBE,EAAAA,OAFmB;AAGnB4D,EAAAA,SAHmB;AAInBP,EAAAA,SAJmB;AAKnBnC,EAAAA;AALmB,CAAvB;AAQA,SACI3B,cADJ","sourcesContent":["import {createAction, handleActions} from \"redux-actions\";\nimport {produce} from \"immer\";\nimport {firestore, storage} from \"../../shared/firebase\";\nimport \"moment\";\nimport moment from \"moment\";\n\nimport {actionCreators as imageActions} from \"./image\";\nimport { orderBy } from 'lodash';\n\nconst SET_POST = \"SET_POST\";\nconst ADD_POST = \"ADD_POST\";\nconst EDIT_POST = \"EDIT_POST\";\nconst LOADING = \"LOADING\";\n\nconst setPost = createAction(SET_POST, (post_list) => ({post_list}));\nconst addPost = createAction(ADD_POST, (post) => ({post}));\nconst editPost = createAction(EDIT_POST, (post_id, post) => ({post_id, post}));\n\nconst loading = createAction(LOADING, (is_loading) => ({ is_loading}));\n\nconst initialState = {\n    list: [],\n    paging: {start:null, next: null, size:3},\n    is_loading: false,\n}\n\nconst initialPost = {\n    // id: 0, user_info: {     user_name: \"mean0\",     user_profile:\n    // \"https://likerdo-bucket-list.s3.ap-northeast-2.amazonaws.com/yui.jpg\" },\n    image_url: \"https://likerdo-bucket-list.s3.ap-northeast-2.amazonaws.com/yui.jpg\",\n    contents: \"\",\n    comment_cnt: 0,\n    insert_dt: moment().format(\"YYYY-MM-DD hh:mm:ss\")\n}\n\nconst editPostFB = (post_id = null, post = {}) => {\n    return function (dispatch, getState, {history}) {\n\n\n    if(!post_id){\n        console.log(\"게시물 정보가없어요!\");\n        return;\n    }\n    const _image = getState().image.preview;\n\n    const _post_idx = getState().post.list.findIndex((p) => p.id === post_id);\n    const _post = getState().post.list[_post_idx];\n    \n    console.log(_post);\n    const postDB = firestore.collection(\"post\");\n\n    if (_image === _post.image_url) {\n        postDB\n        .doc(post_id)\n        .update(post)\n        .then((doc) =>{\n            dispatch(editPost(post_id, { ...post }));\n            history.replace(\"/\");\n          });\n\n          return;\n    }else{\n        const user_id = getState().user.user.uid;\n      const _upload = storage\n        .ref(`images/${user_id}_${new Date().getTime()}`)\n        .putString(_image, \"data_url\");\n\n      _upload.then((snapshot) => {\n        snapshot.ref\n          .getDownloadURL()\n          .then((url) => {\n            console.log(url);\n\n            return url;\n          })\n          .then((url) => {\n            postDB\n              .doc(post_id)\n              .update({ ...post, image_url: url })\n              .then((doc) => {\n                dispatch(editPost(post_id, { ...post, image_url: url }));\n                history.replace(\"/\");\n              });\n          })\n          .catch((err) => {\n            window.alert(\"앗! 이미지 업로드에 문제가 있어요!\");\n            console.log(\"앗! 이미지 업로드에 문제가 있어요!\", err);\n          });\n        });\n    }\n }\n}\n\nconst addPostFB = (contents = \"\",) => {\n    return function (dispatch, getState, {history}) {\n        const postDB = firestore.collection(\"post\");\n\n        const _user = getState().user.user;\n\n        const user_info = {\n            user_name: _user.user_name,\n            user_id: _user.uid,\n            user_profile: _user.user_profile\n        }\n        const _post = {\n            ...initialPost,\n            contents: contents,\n            insert_dt: moment().format(\"YYYY-MM-DD hh:mm:ss\")\n        }\n\n        // 잘 만들어졌나 확인해보세요!!\n        console.log(_post);\n\n        // getState()로 store의 상태값에 접근할 수 있어요!\n        const _image = getState().image.preview;\n\n        // 데이터가 어떤 타입인지 확인해봐요!\n        console.log(typeof _image);\n\n        // 파일 이름은 유저의 id와 현재 시간을 밀리초로 넣어줍시다! (혹시라도 중복이 생기지 않도록요!)\n        const _upload = storage\n            .ref(\n                `images/${user_info.user_id}_${new Date().getTime()}`\n            )\n            .putString(_image, \"data_url\");\n\n        _upload\n            .then((snapshot) => {\n                snapshot\n                    .ref\n                    .getDownloadURL()\n                    .then((url) => {\n                        // url을 확인해봐요!\n                        console.log(url);\n                        dispatch(imageActions.uploadImage(url));\n                        return url;\n                    })\n                    .then((url) => {\n                        // return으로 넘겨준 값이 잘 넘어왔나요? :) 다시 콘솔로 확인해주기!\n                        console.log(url);\n\n                        postDB\n                            .add({\n                                ...user_info,\n                                ..._post,\n                                image_url: url\n                            })\n                            .then((doc) => {\n                                // 아이디를 추가해요!\n                                let post = {\n                                    user_info,\n                                    ..._post,\n                                    id: doc.id,\n                                    image_url: url\n                                };\n                                // 이제 리덕스에 넣어봅시다.\n                                dispatch(addPost(post));\n                                history.replace(\"/\");\n                            })\n                            .catch((err) => {\n                                window.alert(\"앗! 포스트 작성에 문제가 있어요!\");\n                                console.log(\"post 작성 실패!\", err);\n                            });\n                    });\n            })\n            .catch((err) => {\n                window.alert(\"앗! 이미지 업로드에 문제가 있어요!\");\n                console.log(err);\n            });\n    };\n};\n\nconst getPostFB = () => {\n    return function (dispatch, getState, {history}) {\n        \n        dispatch(loading(true));\n        const postDB = firestore.collection(\"post\");\n\n        let query = postDB.orderBy(\"insert_dt\" ,\"desc\")\n\n        if(start){\n            query.startAt(start);\n        }\n\n        query\n        .limit(size +1)\n        .get()\n        .then(docs => {\n            let post_list = [];\n            docs.forEach((doc) => {\n                let _post = doc.data();\n\n                // ['commenct_cnt', 'contents', ..] reduce 함수 공부 /3-3강 18분 설명\n                let post = Object\n                    .keys(_post)\n                    .reduce((acc, cur) => {\n\n                        if (cur.indexOf(\"user_\") !== -1) {\n                            return {\n                                ...acc,\n                                user_info: {\n                                    ...acc.user_info,\n                                    [cur]: _post[cur]\n                                }\n                            };\n                        }\n                        return {\n                            ...acc,\n                            [cur]: _post[cur]\n                        }\n                    }, {\n                        id: doc.id,\n                        user_info: {}\n                    });\n                post_list.push(post);\n            })\n            console.log(post_list);\n\n            dispatch(setPost(post_list));\n        });\n    }\n}\n\n// reducer draft 검색하기\nexport default handleActions(\n    {\n        [SET_POST]: (state, action) =>\n          produce(state, (draft) => {\n            draft.list = action.payload.post_list;\n          }),\n    \n        [ADD_POST]: (state, action) =>\n          produce(state, (draft) => {\n            draft.list.unshift(action.payload.post);\n          }),\n        [EDIT_POST]: (state, action) =>\n          produce(state, (draft) => {\n            let idx = draft.list.findIndex((p) => p.id === action.payload.post_id);\n    \n            draft.list[idx] = { ...draft.list[idx], ...action.payload.post };\n          }),\n          [LOADING]: (state, action) => produce(state, (draft) => {\n              draft.is_loading = action.payload.is_loading;\n          })\n      },\n      initialState\n    );\n\n// action creator export\nconst actionCreators = {\n    setPost,\n    addPost,\n    getPostFB,\n    addPostFB,\n    editPostFB,\n};\n\nexport {\n    actionCreators\n};"]},"metadata":{},"sourceType":"module"}