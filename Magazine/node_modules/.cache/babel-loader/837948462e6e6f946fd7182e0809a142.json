{"ast":null,"code":"import { createAction, handleActions } from \"redux-actions\";\nimport { produce } from \"immer\";\nimport { firestore, storage } from \"../../shared/firebase\";\nimport \"moment\";\nimport moment from \"moment\";\nimport { actionCreators as imageActions } from \"./image\";\nconst SET_POST = \"SET_POST\";\nconst ADD_POST = \"ADD_POST\";\nconst EDIT_POST = \"EDIT_POST\";\nconst setPost = createAction(SET_POST, post_list => ({\n  post_list\n}));\nconst addPost = createAction(ADD_POST, post => ({\n  post\n}));\nconst editPost = createAction(EDIT_POST, (post_id, post) => ({\n  post_id,\n  post\n}));\nconst initialState = {\n  list: []\n};\nconst initialPost = {\n  // id: 0, user_info: {     user_name: \"mean0\",     user_profile:\n  // \"https://likerdo-bucket-list.s3.ap-northeast-2.amazonaws.com/yui.jpg\" },\n  image_url: \"https://likerdo-bucket-list.s3.ap-northeast-2.amazonaws.com/yui.jpg\",\n  contents: \"\",\n  comment_cnt: 0,\n  insert_dt: moment().format(\"YYYY-MM-DD hh:mm:ss\")\n};\n\nconst addPostFB = (contents = \"\") => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    const postDB = firestore.collection(\"post\");\n    const _user = getState().user.user;\n    const user_info = {\n      user_name: _user.user_name,\n      user_id: _user.uid,\n      user_profile: _user.user_profile\n    };\n    const _post = { ...initialPost,\n      contents: contents,\n      insert_dt: moment().format(\"YYYY-MM-DD hh:mm:ss\")\n    }; // 잘 만들어졌나 확인해보세요!!\n\n    console.log(_post); // getState()로 store의 상태값에 접근할 수 있어요!\n\n    const _image = getState().image.preview; // 데이터가 어떤 타입인지 확인해봐요!\n\n    console.log(typeof _image); // 파일 이름은 유저의 id와 현재 시간을 밀리초로 넣어줍시다! (혹시라도 중복이 생기지 않도록요!)\n\n    const _upload = storage.ref(`images/${user_info.user_id}_${new Date().getTime()}`).putString(_image, \"data_url\");\n\n    _upload.then(snapshot => {\n      snapshot.ref.getDownloadURL().then(url => {\n        // url을 확인해봐요!\n        console.log(url);\n        dispatch(imageActions.uploadImage(url));\n        return url;\n      }).then(url => {\n        // return으로 넘겨준 값이 잘 넘어왔나요? :)\n        // 다시 콘솔로 확인해주기!\n        console.log(url);\n        postDB.add({ ...user_info,\n          ..._post,\n          image_url: url\n        }).then(doc => {\n          // 아이디를 추가해요!\n          let post = {\n            user_info,\n            ..._post,\n            id: doc.id,\n            image_url: url\n          }; // 이제 리덕스에 넣어봅시다.\n\n          dispatch(addPost(post));\n          history.replace(\"/\");\n        }).catch(err => {\n          window.alert(\"앗! 포스트 작성에 문제가 있어요!\");\n          console.log(\"post 작성 실패!\", err);\n        });\n      });\n    }).catch(err => {\n      window.alert(\"앗! 이미지 업로드에 문제가 있어요!\");\n      console.log(err);\n    });\n  };\n};\n\nconst getPostFB = () => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    const postDB = firestore.collection(\"post\");\n    postDB.get().then(docs => {\n      let post_list = [];\n      docs.forEach(doc => {\n        let _post = doc.data(); // ['commenct_cnt', 'contents', ..] reduce 함수 공부 /3-3강 18분 설명\n\n\n        let post = Object.keys(_post).reduce((acc, cur) => {\n          if (cur.indexOf(\"user_\") !== -1) {\n            return { ...acc,\n              user_info: { ...acc.user_info,\n                [cur]: _post[cur]\n              }\n            };\n          }\n\n          return { ...acc,\n            [cur]: _post[cur]\n          };\n        }, {\n          id: doc.id,\n          user_info: {}\n        }); // let _post = {     id: doc.id,     ...doc.data() }; let post = {     id:\n        // doc.id,     user_info: {         user_name: _post.user_name, user_profile:\n        // _post.user_profile,         user_id: _post.user_id,     }, image_url:\n        // _post.image_url,     contents: _post.contents,     comment_cnt:\n        // _post.comment_cnt,     insert_dt: _post.insert_dt, }; post_list.push(post);\n\n        post_list.push(post);\n      });\n      console.log(post_list);\n      dispatch(setPost(post_list));\n    });\n  };\n}; // reducer draft 검색하기\n\n\nexport default handleActions({\n  [SET_POST]: (state, action) => produce(state, draft => {\n    draft.list = action.payload.post_list;\n  }),\n  [ADD_POST]: (state, action) => produce(state, draft => {\n    draft.list.unshift(action.payload.post);\n  })\n}, initialState); // action creator export\n\nconst actionCreators = {\n  setPost,\n  addPost,\n  getPostFB,\n  addPostFB\n};\nexport { actionCreators };","map":{"version":3,"sources":["/Users/a111/Desktop/무제 폴더 2/image-community /src/redux/modules/post.js"],"names":["createAction","handleActions","produce","firestore","storage","moment","actionCreators","imageActions","SET_POST","ADD_POST","EDIT_POST","setPost","post_list","addPost","post","editPost","post_id","initialState","list","initialPost","image_url","contents","comment_cnt","insert_dt","format","addPostFB","dispatch","getState","history","postDB","collection","_user","user","user_info","user_name","user_id","uid","user_profile","_post","console","log","_image","image","preview","_upload","ref","Date","getTime","putString","then","snapshot","getDownloadURL","url","uploadImage","add","doc","id","replace","catch","err","window","alert","getPostFB","get","docs","forEach","data","Object","keys","reduce","acc","cur","indexOf","push","state","action","draft","payload","unshift"],"mappings":"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","sourcesContent":["import {createAction, handleActions} from \"redux-actions\";\nimport {produce} from \"immer\";\nimport {firestore, storage} from \"../../shared/firebase\";\nimport \"moment\";\nimport moment from \"moment\";\n\n\nimport {actionCreators as imageActions} from \"./image\";\n\nconst SET_POST = \"SET_POST\";\nconst ADD_POST = \"ADD_POST\";\nconst EDIT_POST = \"EDIT_POST\"\n\nconst setPost = createAction(SET_POST, (post_list) => ({post_list}));\nconst addPost = createAction(ADD_POST, (post) => ({post}));\nconst editPost = createAction(EDIT_POST, (post_id, post) => ({post_id,post}));\n\nconst initialState = {\n    list: []\n}\n\nconst initialPost = {\n    // id: 0, user_info: {     user_name: \"mean0\",     user_profile:\n    // \"https://likerdo-bucket-list.s3.ap-northeast-2.amazonaws.com/yui.jpg\" },\n    image_url: \"https://likerdo-bucket-list.s3.ap-northeast-2.amazonaws.com/yui.jpg\",\n    contents: \"\",\n    comment_cnt: 0,\n    insert_dt: moment().format(\"YYYY-MM-DD hh:mm:ss\")\n}\n\nconst addPostFB = (contents = \"\",) => {\n    return function (dispatch, getState, {history}) {\n        const postDB = firestore.collection(\"post\");\n\n        const _user = getState().user.user;\n\n        const user_info = {\n            user_name: _user.user_name,\n            user_id: _user.uid,\n            user_profile: _user.user_profile\n        }\n        const _post = {\n            ...initialPost,\n            contents: contents,\n            insert_dt: moment().format(\"YYYY-MM-DD hh:mm:ss\")\n        }\n\n        // 잘 만들어졌나 확인해보세요!!\n    console.log(_post);\n\n    // getState()로 store의 상태값에 접근할 수 있어요!\n    const _image = getState().image.preview;\n\n    // 데이터가 어떤 타입인지 확인해봐요!\n    console.log(typeof _image);\n\n    // 파일 이름은 유저의 id와 현재 시간을 밀리초로 넣어줍시다! (혹시라도 중복이 생기지 않도록요!)\n    const _upload = storage\n      .ref(`images/${user_info.user_id}_${new Date().getTime()}`)\n      .putString(_image, \"data_url\");\n\n    _upload\n      .then((snapshot) => {\n        snapshot.ref\n          .getDownloadURL()\n          .then((url) => {\n            // url을 확인해봐요!\n            console.log(url);\n            dispatch(imageActions.uploadImage(url));\n            return url;\n          })\n          .then((url) => {\n            // return으로 넘겨준 값이 잘 넘어왔나요? :)\n            // 다시 콘솔로 확인해주기!\n            console.log(url);\n\n            postDB\n              .add({ ...user_info, ..._post, image_url: url })\n              .then((doc) => {\n                // 아이디를 추가해요!\n                let post = { user_info, ..._post, id: doc.id, image_url: url };\n                // 이제 리덕스에 넣어봅시다.\n                dispatch(addPost(post));\n                history.replace(\"/\");\n              })\n              .catch((err) => {\n\t\t\t\t\t\t\t\twindow.alert(\"앗! 포스트 작성에 문제가 있어요!\");\n                console.log(\"post 작성 실패!\", err);\n              });\n          });\n      })\n      .catch((err) => {\n\t\t\t\twindow.alert(\"앗! 이미지 업로드에 문제가 있어요!\");\n        console.log(err);\n      });\n  };\n};\n        \n\nconst getPostFB = () => {\n    return function (dispatch, getState, {history}) {\n        const postDB = firestore.collection(\"post\");\n\n        postDB\n            .get()\n            .then((docs) => {\n                let post_list = [];\n                docs.forEach((doc) => {\n                    let _post = doc.data();\n\n                    // ['commenct_cnt', 'contents', ..] reduce 함수 공부 /3-3강 18분 설명\n                    let post = Object\n                        .keys(_post)\n                        .reduce((acc, cur) => {\n\n                            if (cur.indexOf(\"user_\") !== -1) {\n                                return {\n                                    ...acc,\n                                    user_info: {\n                                        ...acc.user_info,\n                                        [cur]: _post[cur]\n                                    }\n                                };\n                            }\n                            return {\n                                ...acc,\n                                [cur]: _post[cur]\n                            }\n                        }, {\n                            id: doc.id,\n                            user_info: {}\n                        });\n\n                    // let _post = {     id: doc.id,     ...doc.data() }; let post = {     id:\n                    // doc.id,     user_info: {         user_name: _post.user_name, user_profile:\n                    // _post.user_profile,         user_id: _post.user_id,     }, image_url:\n                    // _post.image_url,     contents: _post.contents,     comment_cnt:\n                    // _post.comment_cnt,     insert_dt: _post.insert_dt, }; post_list.push(post);\n                    post_list.push(post);\n                })\n                console.log(post_list);\n\n                dispatch(setPost(post_list));\n            })\n    }\n}\n\n// reducer draft 검색하기\nexport default handleActions({\n    [SET_POST]: (state, action) => produce(state, (draft) => {\n        draft.list = action.payload.post_list;\n    }),\n\n    [ADD_POST]: (state, action) => produce(state, (draft) => {\n        draft\n            .list\n            .unshift(action.payload.post)\n    })\n}, initialState);\n\n// action creator export\nconst actionCreators = {\n    setPost,\n    addPost,\n    getPostFB,\n    addPostFB\n};\n\nexport {\n    actionCreators\n};"]},"metadata":{},"sourceType":"module"}