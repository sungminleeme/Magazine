{"ast":null,"code":"import { createAction, handleActions } from \"redux-actions\";\nimport { produce } from \"immer\";\nimport { firestore, storage } from \"../../shared/firebase\";\nimport \"moment\";\nimport moment from \"moment\";\nimport { actionCreators as imageActions } from \"./image\";\nconst SET_POST = \"SET_POST\";\nconst ADD_POST = \"ADD_POST\";\nconst EDIT_POST = \"EDIT_POST\";\nconst setPost = createAction(SET_POST, post_list => ({\n  post_list\n}));\nconst addPost = createAction(ADD_POST, post => ({\n  post\n}));\nconst editPost = createAction(EDIT_POST, (post_id, post) => ({\n  post_id,\n  post\n}));\nconst initialState = {\n  list: []\n};\nconst initialPost = {\n  // id: 0, user_info: {     user_name: \"mean0\",     user_profile:\n  // \"https://likerdo-bucket-list.s3.ap-northeast-2.amazonaws.com/yui.jpg\" },\n  image_url: \"https://likerdo-bucket-list.s3.ap-northeast-2.amazonaws.com/yui.jpg\",\n  contents: \"\",\n  comment_cnt: 0,\n  insert_dt: moment().format(\"YYYY-MM-DD hh:mm:ss\")\n};\n\nconst editPostFB = (post_id = null, post = {}) => {\n  return function (dispatch, getState, {\n    history\n  }) {};\n  const _image = getState().image.preview;\n\n  const _post = getState().post.list.findIndex(p => p.id === post_id);\n};\n\nconst addPostFB = (contents = \"\") => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    const postDB = firestore.collection(\"post\");\n    const _user = getState().user.user;\n    const user_info = {\n      user_name: _user.user_name,\n      user_id: _user.uid,\n      user_profile: _user.user_profile\n    };\n    const _post = { ...initialPost,\n      contents: contents,\n      insert_dt: moment().format(\"YYYY-MM-DD hh:mm:ss\")\n    }; // 잘 만들어졌나 확인해보세요!!\n\n    console.log(_post); // getState()로 store의 상태값에 접근할 수 있어요!\n\n    const _image = getState().image.preview; // 데이터가 어떤 타입인지 확인해봐요!\n\n    console.log(typeof _image); // 파일 이름은 유저의 id와 현재 시간을 밀리초로 넣어줍시다! (혹시라도 중복이 생기지 않도록요!)\n\n    const _upload = storage.ref(`images/${user_info.user_id}_${new Date().getTime()}`).putString(_image, \"data_url\");\n\n    _upload.then(snapshot => {\n      snapshot.ref.getDownloadURL().then(url => {\n        // url을 확인해봐요!\n        console.log(url);\n        dispatch(imageActions.uploadImage(url));\n        return url;\n      }).then(url => {\n        // return으로 넘겨준 값이 잘 넘어왔나요? :) 다시 콘솔로 확인해주기!\n        console.log(url);\n        postDB.add({ ...user_info,\n          ..._post,\n          image_url: url\n        }).then(doc => {\n          // 아이디를 추가해요!\n          let post = {\n            user_info,\n            ..._post,\n            id: doc.id,\n            image_url: url\n          }; // 이제 리덕스에 넣어봅시다.\n\n          dispatch(addPost(post));\n          history.replace(\"/\");\n        }).catch(err => {\n          window.alert(\"앗! 포스트 작성에 문제가 있어요!\");\n          console.log(\"post 작성 실패!\", err);\n        });\n      });\n    }).catch(err => {\n      window.alert(\"앗! 이미지 업로드에 문제가 있어요!\");\n      console.log(err);\n    });\n  };\n};\n\nconst getPostFB = () => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    const postDB = firestore.collection(\"post\");\n    postDB.get().then(docs => {\n      let post_list = [];\n      docs.forEach(doc => {\n        let _post = doc.data(); // ['commenct_cnt', 'contents', ..] reduce 함수 공부 /3-3강 18분 설명\n\n\n        let post = Object.keys(_post).reduce((acc, cur) => {\n          if (cur.indexOf(\"user_\") !== -1) {\n            return { ...acc,\n              user_info: { ...acc.user_info,\n                [cur]: _post[cur]\n              }\n            };\n          }\n\n          return { ...acc,\n            [cur]: _post[cur]\n          };\n        }, {\n          id: doc.id,\n          user_info: {}\n        }); // let _post = {     id: doc.id,     ...doc.data() }; let post = {     id:\n        // doc.id,     user_info: {         user_name: _post.user_name, user_profile:\n        // _post.user_profile,         user_id: _post.user_id,     }, image_url:\n        // _post.image_url,     contents: _post.contents,     comment_cnt:\n        // _post.comment_cnt,     insert_dt: _post.insert_dt, }; post_list.push(post);\n\n        post_list.push(post);\n      });\n      console.log(post_list);\n      dispatch(setPost(post_list));\n    });\n  };\n}; // reducer draft 검색하기\n\n\nexport default handleActions({\n  [SET_POST]: (state, action) => produce(state, draft => {\n    draft.list = action.payload.post_list;\n  }),\n  [ADD_POST]: (state, action) => produce(state, draft => {\n    draft.list.unshift(action.payload.post);\n  }),\n  [EDIT_POST]: (state, action) => produce(state, draft => {\n    let idx = draft.list.findIndex(p => p.id === action.payload.post_id);\n    draft.list[idx] = { ...draft.list[idx],\n      ...action.payload.post\n    };\n  })\n}, initialState); // action creator export\n\nconst actionCreators = {\n  setPost,\n  addPost,\n  getPostFB,\n  addPostFB,\n  editPostFB\n};\nexport { actionCreators };","map":{"version":3,"sources":["/Users/a111/Desktop/무제 폴더 2/image-community /src/redux/modules/post.js"],"names":["createAction","handleActions","produce","firestore","storage","moment","actionCreators","imageActions","SET_POST","ADD_POST","EDIT_POST","setPost","post_list","addPost","post","editPost","post_id","initialState","list","initialPost","image_url","contents","comment_cnt","insert_dt","format","editPostFB","dispatch","getState","history","_image","image","preview","_post","findIndex","p","id","addPostFB","postDB","collection","_user","user","user_info","user_name","user_id","uid","user_profile","console","log","_upload","ref","Date","getTime","putString","then","snapshot","getDownloadURL","url","uploadImage","add","doc","replace","catch","err","window","alert","getPostFB","get","docs","forEach","data","Object","keys","reduce","acc","cur","indexOf","push","state","action","draft","payload","unshift","idx"],"mappings":"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","sourcesContent":["import {createAction, handleActions} from \"redux-actions\";\nimport {produce} from \"immer\";\nimport {firestore, storage} from \"../../shared/firebase\";\nimport \"moment\";\nimport moment from \"moment\";\n\nimport {actionCreators as imageActions} from \"./image\";\n\nconst SET_POST = \"SET_POST\";\nconst ADD_POST = \"ADD_POST\";\nconst EDIT_POST = \"EDIT_POST\"\n\nconst setPost = createAction(SET_POST, (post_list) => ({post_list}));\nconst addPost = createAction(ADD_POST, (post) => ({post}));\nconst editPost = createAction(EDIT_POST, (post_id, post) => ({post_id, post}));\n\nconst initialState = {\n    list: []\n}\n\nconst initialPost = {\n    // id: 0, user_info: {     user_name: \"mean0\",     user_profile:\n    // \"https://likerdo-bucket-list.s3.ap-northeast-2.amazonaws.com/yui.jpg\" },\n    image_url: \"https://likerdo-bucket-list.s3.ap-northeast-2.amazonaws.com/yui.jpg\",\n    contents: \"\",\n    comment_cnt: 0,\n    insert_dt: moment().format(\"YYYY-MM-DD hh:mm:ss\")\n}\n\nconst editPostFB = (post_id = null, post = {}) => {\n    return function (dispatch, getState, {history}) {}\n\n    const _image = getState().image.preview;\n\n    const _post = getState().post.list.findIndex((p) => p.id === post_id);\n\n\n\n}\n\nconst addPostFB = (contents = \"\",) => {\n    return function (dispatch, getState, {history}) {\n        const postDB = firestore.collection(\"post\");\n\n        const _user = getState().user.user;\n\n        const user_info = {\n            user_name: _user.user_name,\n            user_id: _user.uid,\n            user_profile: _user.user_profile\n        }\n        const _post = {\n            ...initialPost,\n            contents: contents,\n            insert_dt: moment().format(\"YYYY-MM-DD hh:mm:ss\")\n        }\n\n        // 잘 만들어졌나 확인해보세요!!\n        console.log(_post);\n\n        // getState()로 store의 상태값에 접근할 수 있어요!\n        const _image = getState().image.preview;\n\n        // 데이터가 어떤 타입인지 확인해봐요!\n        console.log(typeof _image);\n\n        // 파일 이름은 유저의 id와 현재 시간을 밀리초로 넣어줍시다! (혹시라도 중복이 생기지 않도록요!)\n        const _upload = storage\n            .ref(\n                `images/${user_info.user_id}_${new Date().getTime()}`\n            )\n            .putString(_image, \"data_url\");\n\n        _upload\n            .then((snapshot) => {\n                snapshot\n                    .ref\n                    .getDownloadURL()\n                    .then((url) => {\n                        // url을 확인해봐요!\n                        console.log(url);\n                        dispatch(imageActions.uploadImage(url));\n                        return url;\n                    })\n                    .then((url) => {\n                        // return으로 넘겨준 값이 잘 넘어왔나요? :) 다시 콘솔로 확인해주기!\n                        console.log(url);\n\n                        postDB\n                            .add({\n                                ...user_info,\n                                ..._post,\n                                image_url: url\n                            })\n                            .then((doc) => {\n                                // 아이디를 추가해요!\n                                let post = {\n                                    user_info,\n                                    ..._post,\n                                    id: doc.id,\n                                    image_url: url\n                                };\n                                // 이제 리덕스에 넣어봅시다.\n                                dispatch(addPost(post));\n                                history.replace(\"/\");\n                            })\n                            .catch((err) => {\n                                window.alert(\"앗! 포스트 작성에 문제가 있어요!\");\n                                console.log(\"post 작성 실패!\", err);\n                            });\n                    });\n            })\n            .catch((err) => {\n                window.alert(\"앗! 이미지 업로드에 문제가 있어요!\");\n                console.log(err);\n            });\n    };\n};\n\nconst getPostFB = () => {\n    return function (dispatch, getState, {history}) {\n        const postDB = firestore.collection(\"post\");\n\n        postDB\n            .get()\n            .then((docs) => {\n                let post_list = [];\n                docs.forEach((doc) => {\n                    let _post = doc.data();\n\n                    // ['commenct_cnt', 'contents', ..] reduce 함수 공부 /3-3강 18분 설명\n                    let post = Object\n                        .keys(_post)\n                        .reduce((acc, cur) => {\n\n                            if (cur.indexOf(\"user_\") !== -1) {\n                                return {\n                                    ...acc,\n                                    user_info: {\n                                        ...acc.user_info,\n                                        [cur]: _post[cur]\n                                    }\n                                };\n                            }\n                            return {\n                                ...acc,\n                                [cur]: _post[cur]\n                            }\n                        }, {\n                            id: doc.id,\n                            user_info: {}\n                        });\n\n                    // let _post = {     id: doc.id,     ...doc.data() }; let post = {     id:\n                    // doc.id,     user_info: {         user_name: _post.user_name, user_profile:\n                    // _post.user_profile,         user_id: _post.user_id,     }, image_url:\n                    // _post.image_url,     contents: _post.contents,     comment_cnt:\n                    // _post.comment_cnt,     insert_dt: _post.insert_dt, }; post_list.push(post);\n                    post_list.push(post);\n                })\n                console.log(post_list);\n\n                dispatch(setPost(post_list));\n            })\n    }\n}\n\n// reducer draft 검색하기\nexport default handleActions(\n    {\n        [SET_POST]: (state, action) =>\n          produce(state, (draft) => {\n            draft.list = action.payload.post_list;\n          }),\n    \n        [ADD_POST]: (state, action) =>\n          produce(state, (draft) => {\n            draft.list.unshift(action.payload.post);\n          }),\n        [EDIT_POST]: (state, action) =>\n          produce(state, (draft) => {\n            let idx = draft.list.findIndex((p) => p.id === action.payload.post_id);\n    \n            draft.list[idx] = { ...draft.list[idx], ...action.payload.post };\n          }),\n      },\n      initialState\n    );\n\n// action creator export\nconst actionCreators = {\n    setPost,\n    addPost,\n    getPostFB,\n    addPostFB,\n    editPostFB,\n};\n\nexport {\n    actionCreators\n};"]},"metadata":{},"sourceType":"module"}