{"ast":null,"code":"import { createAction, handleActions } from \"redux-actions\";\nimport { produce } from \"immer\";\nimport { firestore } from \"../../shared/firebase\";\nimport \"moment\";\nimport moment from \"moment\";\nimport firebase from \"firebase/app\";\nimport { actionCreators as postActions } from \"./post\";\nconst SET_COMMENT = \"SET_COMMENT\";\nconst ADD_COMMENT = \"ADD_COMMENT\";\nconst LOADING = \"LOADING\";\nconst setComment = createAction(SET_COMMENT, (post_id, comment_list) => ({\n  post_id,\n  comment_list\n}));\nconst addComment = createAction(ADD_COMMENT, (post_id, comment) => ({\n  post_id,\n  comment\n})); // const loading = createAction(LOADING, (is_loading) => ({is_loading}));\n\nconst initialState = {\n  list: {},\n  is_loading: false\n};\n\nconst addCommentFB = (post_id, contents) => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    const commentDB = firestore.collection(\"comment\");\n    const user_info = getState().user.user;\n    let comment = {\n      post_id: post_id,\n      user_id: user_info.uid,\n      user_name: user_info.user_name,\n      user_profile: user_info.user_profile,\n      contents: contents,\n      insert_dt: moment().format(\"YYYY-MM-DD hh:mm:ss\")\n    }; // firestore에 코멘트 정보를 넣어요!\n\n    commentDB.add(comment).then(doc => {\n      const postDB = firestore.collection(\"post\");\n      const post = getState().post.list.find(l => l.id === post_id); //   firestore에 저장된 값을 +1해줍니다!\n\n      const increment = firebase.firestore.FieldValue.increment(1);\n      comment = { ...comment,\n        id: doc.id\n      };\n      postDB.doc(post_id).update({\n        comment_cnt: increment\n      }).then(_post => {\n        dispatch(addComment(post_id, comment));\n\n        if (post) {\n          dispatch(postActions.editPost(post_id, {\n            comment_cnt: parseInt(post.comment_cnt) + 1\n          }));\n        }\n      });\n    });\n  };\n};\n\nconst getCommentFB = post_id => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    if (!post_id) {\n      return;\n    }\n\n    const commentDB = firestore.collection(\"comment\"); // where로 게시글 id가 같은 걸 찾고,\n    // orderBy로 정렬해줍니다.\n\n    commentDB.where(\"post-id\", \"==\", post_id).orderBy(\"insert_dt\", \"desc\").get().then(docs => {\n      let list = [];\n      docs.forEach(doc => {\n        list.push({ ...doc.data(),\n          id: doc.id\n        });\n      });\n      dispatch(setComment(post_id, list));\n    }).catch(err => {\n      console.log('댓글 정보를 가져올 수가 없네요!', err);\n    });\n  };\n}; // comment는 딕셔너리 구조로 만들어서,\n// post_id로 나눠 보관합시다! (각각 게시글 방을 만들어준다고 생각하면 구조 이해가 쉬워요.)\n\n\nexport default handleActions({\n  [SET_COMMENT]: (state, action) => produce(state, draft => {\n    // let data = {[post_id] : com_list, ...}\n    draft.list[action.payload.post_id] = action.payload.comment_list;\n  }),\n  [ADD_COMMENT]: (state, action) => produce(state, draft => {\n    draft.list[action.payload.post_id].unshift(action.payload.comment);\n  }),\n  [LOADING]: (state, action) => produce(state, draft => {\n    draft.is_loading = action.payload.is_loading;\n  })\n}, initialState);\nconst actionCreators = {\n  getCommentFB,\n  addCommentFB,\n  setComment,\n  addComment\n};\nexport { actionCreators };","map":{"version":3,"sources":["/Users/a111/Desktop/무제 폴더 2/image-community /src/redux/modules/comment.js"],"names":["createAction","handleActions","produce","firestore","moment","firebase","actionCreators","postActions","SET_COMMENT","ADD_COMMENT","LOADING","setComment","post_id","comment_list","addComment","comment","initialState","list","is_loading","addCommentFB","contents","dispatch","getState","history","commentDB","collection","user_info","user","user_id","uid","user_name","user_profile","insert_dt","format","add","then","doc","postDB","post","find","l","id","increment","FieldValue","update","comment_cnt","_post","editPost","parseInt","getCommentFB","where","orderBy","get","docs","forEach","push","data","catch","err","console","log","state","action","draft","payload","unshift"],"mappings":"AAAA,SAAQA,YAAR,EAAsBC,aAAtB,QAA0C,eAA1C;AACA,SAAQC,OAAR,QAAsB,OAAtB;AACA,SAAQC,SAAR,QAAwB,uBAAxB;AACA,OAAO,QAAP;AACA,OAAOC,MAAP,MAAmB,QAAnB;AAEA,OAAOC,QAAP,MAAqB,cAArB;AAEA,SAASC,cAAc,IAAIC,WAA3B,QAA8C,QAA9C;AAEA,MAAMC,WAAW,GAAG,aAApB;AACA,MAAMC,WAAW,GAAG,aAApB;AAEA,MAAMC,OAAO,GAAG,SAAhB;AAEA,MAAMC,UAAU,GAAGX,YAAY,CAC3BQ,WAD2B,EAE3B,CAACI,OAAD,EAAUC,YAAV,MAA4B;AAACD,EAAAA,OAAD;AAAUC,EAAAA;AAAV,CAA5B,CAF2B,CAA/B;AAIA,MAAMC,UAAU,GAAGd,YAAY,CAC3BS,WAD2B,EAE3B,CAACG,OAAD,EAAUG,OAAV,MAAuB;AAACH,EAAAA,OAAD;AAAUG,EAAAA;AAAV,CAAvB,CAF2B,CAA/B,C,CAKA;;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,IAAI,EAAE,EADW;AAEjBC,EAAAA,UAAU,EAAE;AAFK,CAArB;;AAKA,MAAMC,YAAY,GAAG,CAACP,OAAD,EAASQ,QAAT,KAAsB;AACzC,SAAO,UAASC,QAAT,EAAmBC,QAAnB,EAA6B;AAACC,IAAAA;AAAD,GAA7B,EAAuC;AAC5C,UAAMC,SAAS,GAAGrB,SAAS,CAACsB,UAAV,CAAqB,SAArB,CAAlB;AACA,UAAMC,SAAS,GAAGJ,QAAQ,GAAGK,IAAX,CAAgBA,IAAlC;AAEA,QAAIZ,OAAO,GAAG;AACZH,MAAAA,OAAO,EAAEA,OADG;AAEZgB,MAAAA,OAAO,EAAEF,SAAS,CAACG,GAFP;AAGZC,MAAAA,SAAS,EAAEJ,SAAS,CAACI,SAHT;AAIZC,MAAAA,YAAY,EAAEL,SAAS,CAACK,YAJZ;AAKZX,MAAAA,QAAQ,EAAEA,QALE;AAMZY,MAAAA,SAAS,EAAE5B,MAAM,GAAG6B,MAAT,CAAgB,qBAAhB;AANC,KAAd,CAJ4C,CAa5C;;AACAT,IAAAA,SAAS,CAACU,GAAV,CAAcnB,OAAd,EAAuBoB,IAAvB,CAA6BC,GAAD,IAAS;AACnC,YAAMC,MAAM,GAAGlC,SAAS,CAACsB,UAAV,CAAqB,MAArB,CAAf;AAGA,YAAMa,IAAI,GAAGhB,QAAQ,GAAGgB,IAAX,CAAgBrB,IAAhB,CAAqBsB,IAArB,CAA2BC,CAAD,IAAOA,CAAC,CAACC,EAAF,KAAS7B,OAA1C,CAAb,CAJmC,CAKnC;;AACA,YAAM8B,SAAS,GAAGrC,QAAQ,CAACF,SAAT,CAAmBwC,UAAnB,CAA8BD,SAA9B,CAAwC,CAAxC,CAAlB;AAEA3B,MAAAA,OAAO,GAAG,EAAC,GAAGA,OAAJ;AAAa0B,QAAAA,EAAE,EAACL,GAAG,CAACK;AAApB,OAAV;AAEAJ,MAAAA,MAAM,CAACD,GAAP,CAAWxB,OAAX,EAAoBgC,MAApB,CAA2B;AAAEC,QAAAA,WAAW,EAAEH;AAAf,OAA3B,EACCP,IADD,CACOW,KAAD,IAAU;AAEdzB,QAAAA,QAAQ,CAACP,UAAU,CAACF,OAAD,EAAUG,OAAV,CAAX,CAAR;;AAEA,YAAGuB,IAAH,EAAQ;AACNjB,UAAAA,QAAQ,CACNd,WAAW,CAACwC,QAAZ,CAAqBnC,OAArB,EAA8B;AAC5BiC,YAAAA,WAAW,EAAEG,QAAQ,CAACV,IAAI,CAACO,WAAN,CAAR,GAA6B;AADd,WAA9B,CADM,CAAR;AAID;AACF,OAXD;AAYD,KAtBD;AAuBD,GArCD;AAsCD,CAvCD;;AAwCA,MAAMI,YAAY,GAAIrC,OAAD,IAAa;AAC9B,SAAO,UAAUS,QAAV,EAAoBC,QAApB,EAA8B;AAACC,IAAAA;AAAD,GAA9B,EAAyC;AAC5C,QAAI,CAACX,OAAL,EAAc;AACV;AACH;;AACD,UAAMY,SAAS,GAAGrB,SAAS,CAACsB,UAAV,CAAqB,SAArB,CAAlB,CAJ4C,CAM5C;AACA;;AACAD,IAAAA,SAAS,CACJ0B,KADL,CACW,SADX,EACsB,IADtB,EAC4BtC,OAD5B,EAEKuC,OAFL,CAEa,WAFb,EAE0B,MAF1B,EAGKC,GAHL,GAIKjB,IAJL,CAIWkB,IAAD,IAAS;AACb,UAAIpC,IAAI,GAAG,EAAX;AAEAoC,MAAAA,IAAI,CAACC,OAAL,CAAclB,GAAD,IAAQ;AACnBnB,QAAAA,IAAI,CAACsC,IAAL,CAAU,EAAC,GAAGnB,GAAG,CAACoB,IAAJ,EAAJ;AAAgBf,UAAAA,EAAE,EAACL,GAAG,CAACK;AAAvB,SAAV;AACD,OAFD;AAIApB,MAAAA,QAAQ,CAACV,UAAU,CAACC,OAAD,EAAUK,IAAV,CAAX,CAAR;AACD,KAZL,EAYOwC,KAZP,CAYaC,GAAG,IAAG;AACbC,MAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCF,GAAlC;AACD,KAdL;AAeH,GAvBD;AAwBH,CAzBD,C,CA0BA;AACA;;;AACA,eAAezD,aAAa,CAC1B;AACA,GAACO,WAAD,GAAe,CAACqD,KAAD,EAAQC,MAAR,KACf5D,OAAO,CAAC2D,KAAD,EAASE,KAAD,IAAW;AACxB;AACAA,IAAAA,KAAK,CAAC9C,IAAN,CAAW6C,MAAM,CAACE,OAAP,CAAepD,OAA1B,IAAqCkD,MAAM,CAACE,OAAP,CAAenD,YAApD;AACD,GAHM,CAFP;AAMF,GAACJ,WAAD,GAAe,CAACoD,KAAD,EAAQC,MAAR,KACf5D,OAAO,CAAC2D,KAAD,EAASE,KAAD,IAAW;AACxBA,IAAAA,KAAK,CAAC9C,IAAN,CAAW6C,MAAM,CAACE,OAAP,CAAepD,OAA1B,EAAmCqD,OAAnC,CAA2CH,MAAM,CAACE,OAAP,CAAejD,OAA1D;AACD,GAFM,CAPL;AAUF,GAACL,OAAD,GAAW,CAACmD,KAAD,EAAQC,MAAR,KACT5D,OAAO,CAAC2D,KAAD,EAASE,KAAD,IAAW;AACxBA,IAAAA,KAAK,CAAC7C,UAAN,GAAmB4C,MAAM,CAACE,OAAP,CAAe9C,UAAlC;AACD,GAFM;AAXP,CAD0B,EAgB5BF,YAhB4B,CAA5B;AAmBA,MAAMV,cAAc,GAAG;AACnB2C,EAAAA,YADmB;AAEnB9B,EAAAA,YAFmB;AAGnBR,EAAAA,UAHmB;AAInBG,EAAAA;AAJmB,CAAvB;AAOA,SACIR,cADJ","sourcesContent":["import {createAction, handleActions} from \"redux-actions\";\nimport {produce} from \"immer\";\nimport {firestore} from \"../../shared/firebase\";\nimport \"moment\";\nimport moment from \"moment\";\n\nimport firebase from \"firebase/app\";\n\nimport { actionCreators as postActions } from \"./post\";\n\nconst SET_COMMENT = \"SET_COMMENT\";\nconst ADD_COMMENT = \"ADD_COMMENT\";\n\nconst LOADING = \"LOADING\";\n\nconst setComment = createAction(\n    SET_COMMENT,\n    (post_id, comment_list) => ({post_id, comment_list})\n);\nconst addComment = createAction(\n    ADD_COMMENT,\n    (post_id, comment) => ({post_id, comment})\n);\n\n// const loading = createAction(LOADING, (is_loading) => ({is_loading}));\n\nconst initialState = {\n    list: {},\n    is_loading: false\n};\n\nconst addCommentFB = (post_id,contents) => {\n  return function(dispatch, getState, {history}){\n    const commentDB = firestore.collection(\"comment\");\n    const user_info = getState().user.user;\n\n    let comment = {\n      post_id: post_id,\n      user_id: user_info.uid,\n      user_name: user_info.user_name,\n      user_profile: user_info.user_profile,\n      contents: contents,\n      insert_dt: moment().format(\"YYYY-MM-DD hh:mm:ss\"),\n    }\n\n    // firestore에 코멘트 정보를 넣어요!\n    commentDB.add(comment).then((doc) => {\n      const postDB = firestore.collection(\"post\");\n\n\n      const post = getState().post.list.find((l) => l.id === post_id);\n      //   firestore에 저장된 값을 +1해줍니다!\n      const increment = firebase.firestore.FieldValue.increment(1);\n\n      comment = {...comment, id:doc.id};\n\n      postDB.doc(post_id).update({ comment_cnt: increment })\n      .then((_post) =>{\n\n        dispatch(addComment(post_id, comment));\n\n        if(post){\n          dispatch(\n            postActions.editPost(post_id, {\n              comment_cnt: parseInt(post.comment_cnt) + 1,\n          }));\n        }\n      })\n    })\n  }\n}\nconst getCommentFB = (post_id) => {\n    return function (dispatch, getState, {history}) {\n        if (!post_id) {\n            return;\n        }\n        const commentDB = firestore.collection(\"comment\");\n\n        // where로 게시글 id가 같은 걸 찾고,\n        // orderBy로 정렬해줍니다.\n        commentDB\n            .where(\"post-id\", \"==\", post_id)\n            .orderBy(\"insert_dt\", \"desc\")\n            .get()\n            .then((docs) =>{\n              let list = [];\n\n              docs.forEach((doc) =>{\n                list.push({...doc.data(), id:doc.id})\n              })\n\n              dispatch(setComment(post_id, list))\n            }).catch(err =>{\n              console.log('댓글 정보를 가져올 수가 없네요!', err)\n            })\n    }\n}\n// comment는 딕셔너리 구조로 만들어서,\n// post_id로 나눠 보관합시다! (각각 게시글 방을 만들어준다고 생각하면 구조 이해가 쉬워요.)\nexport default handleActions(\n  {\n  [SET_COMMENT]: (state, action) =>\n  produce(state, (draft) => {\n    // let data = {[post_id] : com_list, ...}\n    draft.list[action.payload.post_id] = action.payload.comment_list;\n  }),\n[ADD_COMMENT]: (state, action) => \nproduce(state, (draft) => {\n  draft.list[action.payload.post_id].unshift(action.payload.comment);\n}),\n[LOADING]: (state, action) =>\n  produce(state, (draft) => {\n    draft.is_loading = action.payload.is_loading;\n  }),\n},\ninitialState\n);\n\nconst actionCreators = {\n    getCommentFB,\n    addCommentFB,\n    setComment,\n    addComment\n};\n\nexport {\n    actionCreators\n};"]},"metadata":{},"sourceType":"module"}