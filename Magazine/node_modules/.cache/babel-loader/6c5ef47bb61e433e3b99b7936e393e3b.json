{"ast":null,"code":"import { createAction, handleActions } from \"redux-actions\";\nimport { produce } from \"immer\";\nimport { firestore, storage } from \"../../shared/firebase\";\nimport \"moment\";\nimport moment from \"moment\";\nimport { actionCreators as imageActions } from \"./image\";\nimport { orderBy } from 'lodash';\nconst SET_POST = \"SET_POST\";\nconst ADD_POST = \"ADD_POST\";\nconst EDIT_POST = \"EDIT_POST\";\nconst LOADING = \"LOADING\";\nconst setPost = createAction(SET_POST, (post_list, paging) => ({\n  post_list,\n  paging\n}));\nconst addPost = createAction(ADD_POST, post => ({\n  post\n}));\nconst editPost = createAction(EDIT_POST, (post_id, post) => ({\n  post_id,\n  post\n}));\nconst loading = createAction(LOADING, is_loading => ({\n  is_loading\n}));\nconst initialState = {\n  list: [],\n  paging: {\n    start: null,\n    next: null,\n    size: 3\n  },\n  is_loading: false\n};\nconst initialPost = {\n  // id: 0, user_info: {     user_name: \"mean0\",     user_profile:\n  // \"https://likerdo-bucket-list.s3.ap-northeast-2.amazonaws.com/yui.jpg\" },\n  image_url: \"https://likerdo-bucket-list.s3.ap-northeast-2.amazonaws.com/yui.jpg\",\n  contents: \"\",\n  comment_cnt: 0,\n  insert_dt: moment().format(\"YYYY-MM-DD hh:mm:ss\")\n};\n\nconst editPostFB = (post_id = null, post = {}) => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    if (!post_id) {\n      console.log(\"게시물 정보가없어요!\");\n      return;\n    }\n\n    const _image = getState().image.preview;\n\n    const _post_idx = getState().post.list.findIndex(p => p.id === post_id);\n\n    const _post = getState().post.list[_post_idx];\n\n    console.log(_post);\n    const postDB = firestore.collection(\"post\");\n\n    if (_image === _post.image_url) {\n      postDB.doc(post_id).update(post).then(doc => {\n        dispatch(editPost(post_id, { ...post\n        }));\n        history.replace(\"/\");\n      });\n      return;\n    } else {\n      const user_id = getState().user.user.uid;\n\n      const _upload = storage.ref(`images/${user_id}_${new Date().getTime()}`).putString(_image, \"data_url\");\n\n      _upload.then(snapshot => {\n        snapshot.ref.getDownloadURL().then(url => {\n          console.log(url);\n          return url;\n        }).then(url => {\n          postDB.doc(post_id).update({ ...post,\n            image_url: url\n          }).then(doc => {\n            dispatch(editPost(post_id, { ...post,\n              image_url: url\n            }));\n            history.replace(\"/\");\n          });\n        }).catch(err => {\n          window.alert(\"앗! 이미지 업로드에 문제가 있어요!\");\n          console.log(\"앗! 이미지 업로드에 문제가 있어요!\", err);\n        });\n      });\n    }\n  };\n};\n\nconst addPostFB = (contents = \"\") => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    const postDB = firestore.collection(\"post\");\n    const _user = getState().user.user;\n    const user_info = {\n      user_name: _user.user_name,\n      user_id: _user.uid,\n      user_profile: _user.user_profile\n    };\n    const _post = { ...initialPost,\n      contents: contents,\n      insert_dt: moment().format(\"YYYY-MM-DD hh:mm:ss\")\n    }; // 잘 만들어졌나 확인해보세요!!\n\n    console.log(_post); // getState()로 store의 상태값에 접근할 수 있어요!\n\n    const _image = getState().image.preview; // 데이터가 어떤 타입인지 확인해봐요!\n\n    console.log(typeof _image); // 파일 이름은 유저의 id와 현재 시간을 밀리초로 넣어줍시다! (혹시라도 중복이 생기지 않도록요!)\n\n    const _upload = storage.ref(`images/${user_info.user_id}_${new Date().getTime()}`).putString(_image, \"data_url\");\n\n    _upload.then(snapshot => {\n      snapshot.ref.getDownloadURL().then(url => {\n        // url을 확인해봐요!\n        console.log(url);\n        dispatch(imageActions.uploadImage(url));\n        return url;\n      }).then(url => {\n        // return으로 넘겨준 값이 잘 넘어왔나요? :) 다시 콘솔로 확인해주기!\n        console.log(url);\n        postDB.add({ ...user_info,\n          ..._post,\n          image_url: url\n        }).then(doc => {\n          // 아이디를 추가해요!\n          let post = {\n            user_info,\n            ..._post,\n            id: doc.id,\n            image_url: url\n          }; // 이제 리덕스에 넣어봅시다.\n\n          dispatch(addPost(post));\n          history.replace(\"/\");\n        }).catch(err => {\n          window.alert(\"앗! 포스트 작성에 문제가 있어요!\");\n          console.log(\"post 작성 실패!\", err);\n        });\n      });\n    }).catch(err => {\n      window.alert(\"앗! 이미지 업로드에 문제가 있어요!\");\n      console.log(err);\n    });\n  };\n};\n\nconst getPostFB = (start = null, size = 3) => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    let _paging = getState().post.paging;\n\n    if (_paging.start && !_paging.next) {\n      return;\n    }\n\n    dispatch(loading(true));\n    const postDB = firestore.collection(\"post\");\n    let query = postDB.orderBy(\"insert_dt\", \"desc\");\n\n    if (start) {\n      query = query.startAt(start);\n    }\n\n    query.limit(size + 1).get().then(docs => {\n      let post_list = [];\n      let paging = {\n        start: docs.docs[0],\n        next: docs.docs.length === size + 1 ? docs.docs[docs.docs.length - 1] : null,\n        size: size\n      };\n      docs.forEach(doc => {\n        let _post = doc.data(); // ['commenct_cnt', 'contents', ..] reduce 함수 공부 /3-3강 18분 설명\n\n\n        let post = Object.keys(_post).reduce((acc, cur) => {\n          if (cur.indexOf(\"user_\") !== -1) {\n            return { ...acc,\n              user_info: { ...acc.user_info,\n                [cur]: _post[cur]\n              }\n            };\n          }\n\n          return { ...acc,\n            [cur]: _post[cur]\n          };\n        }, {\n          id: doc.id,\n          user_info: {}\n        });\n        post_list.push(post);\n      });\n      post_list.pop();\n      dispatch(setPost(post_list, paging));\n    });\n  };\n};\n\nconst getOnePostFB = id => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    postDB.doc(id).get().then(doc => {\n      console.log(doc);\n      console.log(doc.data());\n\n      let _post = doc.data();\n\n      let post = Object.keys(_post).reduce((acc, cur) => {\n        if (cur.indexOf(\"user_\") !== -1) {\n          return { ...acc,\n            user_info: { ...acc.user_info,\n              [cur]: _post[cur]\n            }\n          };\n        }\n\n        return { ...acc,\n          [cur]: _post[cur]\n        };\n      }, {\n        id: doc.id,\n        user_info: {}\n      });\n      dispatch(setPost([post]), {\n        start: null,\n        next: null,\n        size: 3\n      });\n    });\n  };\n}; // reducer draft 검색하기\n\n\nexport default handleActions({\n  [SET_POST]: (state, action) => produce(state, draft => {\n    draft.list.push(...action.payload.post_list);\n    draft.lis = draft.list.reduce((acc, cur) => {\n      if (acc.findIndex(a => a.id === cur.id) === -1) {\n        return [...acc, cur];\n      } else {\n        acc[acc.findIndex(a => a.id === cur.id)] = cur;\n        return acc;\n      }\n    }, []);\n    draft.paging = action.payload.paging;\n    draft.is_loading = false;\n  }),\n  [ADD_POST]: (state, action) => produce(state, draft => {\n    draft.list.unshift(action.payload.post);\n  }),\n  [EDIT_POST]: (state, action) => produce(state, draft => {\n    let idx = draft.list.findIndex(p => p.id === action.payload.post_id);\n    draft.list[idx] = { ...draft.list[idx],\n      ...action.payload.post\n    };\n  }),\n  [LOADING]: (state, action) => produce(state, draft => {\n    draft.is_loading = action.payload.is_loading;\n  })\n}, initialState); // action creator export\n\nconst actionCreators = {\n  setPost,\n  addPost,\n  getPostFB,\n  addPostFB,\n  editPostFB\n};\nexport { actionCreators };","map":{"version":3,"sources":["/Users/a111/Desktop/무제 폴더 2/image-community /src/redux/modules/post.js"],"names":["createAction","handleActions","produce","firestore","storage","moment","actionCreators","imageActions","orderBy","SET_POST","ADD_POST","EDIT_POST","LOADING","setPost","post_list","paging","addPost","post","editPost","post_id","loading","is_loading","initialState","list","start","next","size","initialPost","image_url","contents","comment_cnt","insert_dt","format","editPostFB","dispatch","getState","history","console","log","_image","image","preview","_post_idx","findIndex","p","id","_post","postDB","collection","doc","update","then","replace","user_id","user","uid","_upload","ref","Date","getTime","putString","snapshot","getDownloadURL","url","catch","err","window","alert","addPostFB","_user","user_info","user_name","user_profile","uploadImage","add","getPostFB","_paging","query","startAt","limit","get","docs","length","forEach","data","Object","keys","reduce","acc","cur","indexOf","push","pop","getOnePostFB","state","action","draft","payload","lis","a","unshift","idx"],"mappings":"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","sourcesContent":["import {createAction, handleActions} from \"redux-actions\";\nimport {produce} from \"immer\";\nimport {firestore, storage} from \"../../shared/firebase\";\nimport \"moment\";\nimport moment from \"moment\";\n\nimport {actionCreators as imageActions} from \"./image\";\nimport { orderBy } from 'lodash';\n\nconst SET_POST = \"SET_POST\";\nconst ADD_POST = \"ADD_POST\";\nconst EDIT_POST = \"EDIT_POST\";\nconst LOADING = \"LOADING\";\n\nconst setPost = createAction(SET_POST, (post_list, paging) => ({post_list, paging}));\nconst addPost = createAction(ADD_POST, (post) => ({post}));\nconst editPost = createAction(EDIT_POST, (post_id, post) => ({post_id, post}));\n\nconst loading = createAction(LOADING, (is_loading) => ({ is_loading}));\n\nconst initialState = {\n    list: [],\n    paging: {start:null, next: null, size:3},\n    is_loading: false,\n}\n\nconst initialPost = {\n    // id: 0, user_info: {     user_name: \"mean0\",     user_profile:\n    // \"https://likerdo-bucket-list.s3.ap-northeast-2.amazonaws.com/yui.jpg\" },\n    image_url: \"https://likerdo-bucket-list.s3.ap-northeast-2.amazonaws.com/yui.jpg\",\n    contents: \"\",\n    comment_cnt: 0,\n    insert_dt: moment().format(\"YYYY-MM-DD hh:mm:ss\")\n}\n\nconst editPostFB = (post_id = null, post = {}) => {\n    return function (dispatch, getState, {history}) {\n\n\n    if(!post_id){\n        console.log(\"게시물 정보가없어요!\");\n        return;\n    }\n    const _image = getState().image.preview;\n\n    const _post_idx = getState().post.list.findIndex((p) => p.id === post_id);\n    const _post = getState().post.list[_post_idx];\n    \n    console.log(_post);\n    const postDB = firestore.collection(\"post\");\n\n    if (_image === _post.image_url) {\n        postDB\n        .doc(post_id)\n        .update(post)\n        .then((doc) =>{\n            dispatch(editPost(post_id, { ...post }));\n            history.replace(\"/\");\n          });\n\n          return;\n    }else{\n        const user_id = getState().user.user.uid;\n      const _upload = storage\n        .ref(`images/${user_id}_${new Date().getTime()}`)\n        .putString(_image, \"data_url\");\n\n      _upload.then((snapshot) => {\n        snapshot.ref\n          .getDownloadURL()\n          .then((url) => {\n            console.log(url);\n\n            return url;\n          })\n          .then((url) => {\n            postDB\n              .doc(post_id)\n              .update({ ...post, image_url: url })\n              .then((doc) => {\n                dispatch(editPost(post_id, { ...post, image_url: url }));\n                history.replace(\"/\");\n              });\n          })\n          .catch((err) => {\n            window.alert(\"앗! 이미지 업로드에 문제가 있어요!\");\n            console.log(\"앗! 이미지 업로드에 문제가 있어요!\", err);\n          });\n        });\n    }\n }\n}\n\nconst addPostFB = (contents = \"\",) => {\n    return function (dispatch, getState, {history}) {\n        const postDB = firestore.collection(\"post\");\n\n        const _user = getState().user.user;\n\n        const user_info = {\n            user_name: _user.user_name,\n            user_id: _user.uid,\n            user_profile: _user.user_profile\n        }\n        const _post = {\n            ...initialPost,\n            contents: contents,\n            insert_dt: moment().format(\"YYYY-MM-DD hh:mm:ss\")\n        }\n\n        // 잘 만들어졌나 확인해보세요!!\n        console.log(_post);\n\n        // getState()로 store의 상태값에 접근할 수 있어요!\n        const _image = getState().image.preview;\n\n        // 데이터가 어떤 타입인지 확인해봐요!\n        console.log(typeof _image);\n\n        // 파일 이름은 유저의 id와 현재 시간을 밀리초로 넣어줍시다! (혹시라도 중복이 생기지 않도록요!)\n        const _upload = storage\n            .ref(\n                `images/${user_info.user_id}_${new Date().getTime()}`\n            )\n            .putString(_image, \"data_url\");\n\n        _upload\n            .then((snapshot) => {\n                snapshot\n                    .ref\n                    .getDownloadURL()\n                    .then((url) => {\n                        // url을 확인해봐요!\n                        console.log(url);\n                        dispatch(imageActions.uploadImage(url));\n                        return url;\n                    })\n                    .then((url) => {\n                        // return으로 넘겨준 값이 잘 넘어왔나요? :) 다시 콘솔로 확인해주기!\n                        console.log(url);\n\n                        postDB\n                            .add({\n                                ...user_info,\n                                ..._post,\n                                image_url: url\n                            })\n                            .then((doc) => {\n                                // 아이디를 추가해요!\n                                let post = {\n                                    user_info,\n                                    ..._post,\n                                    id: doc.id,\n                                    image_url: url\n                                };\n                                // 이제 리덕스에 넣어봅시다.\n                                dispatch(addPost(post));\n                                history.replace(\"/\");\n                            })\n                            .catch((err) => {\n                                window.alert(\"앗! 포스트 작성에 문제가 있어요!\");\n                                console.log(\"post 작성 실패!\", err);\n                            });\n                    });\n            })\n            .catch((err) => {\n                window.alert(\"앗! 이미지 업로드에 문제가 있어요!\");\n                console.log(err);\n            });\n    };\n};\n\nconst getPostFB = (start = null, size = 3) => {\n    return function (dispatch, getState, {history}) {\n        \n        let _paging = getState().post.paging;\n\n        if(_paging.start && !_paging.next){\n            return;\n        }\n\n        dispatch(loading(true));\n        const postDB = firestore.collection(\"post\");\n\n        let query = postDB.orderBy(\"insert_dt\" ,\"desc\");\n\n        if(start){\n            query= query.startAt(start);\n        }\n\n        query\n        .limit(size +1)\n        .get()\n        .then(docs => {\n            let post_list = [];\n\n            let paging = {\n                start: docs.docs[0],\n                next: docs.docs.length === size+1? docs.docs[docs.docs.length -1] : null,\n                size: size,\n            }\n\n\n            docs.forEach((doc) => {\n                let _post = doc.data();\n\n                // ['commenct_cnt', 'contents', ..] reduce 함수 공부 /3-3강 18분 설명\n                let post = Object\n                    .keys(_post)\n                    .reduce((acc, cur) => {\n\n                        if (cur.indexOf(\"user_\") !== -1) {\n                            return {\n                                ...acc,\n                                user_info: {\n                                    ...acc.user_info,\n                                    [cur]: _post[cur]\n                                }\n                            };\n                        }\n                        return {\n                            ...acc,\n                            [cur]: _post[cur]\n                        }\n                    }, {\n                        id: doc.id,\n                        user_info: {}\n                    });\n                post_list.push(post);\n            })\n\n            post_list.pop();\n         \n\n            dispatch(setPost(post_list, paging));\n        });\n    }\n}\n\nconst getOnePostFB = (id) => {\n    return function(dispatch, getState, {history}){\n        postDB.doc(id).get().then(doc => {\n            console.log(doc);\n            console.log(doc.data());\n\n            let _post = doc.data();\n            let post = Object\n                    .keys(_post)\n                    .reduce((acc, cur) => {\n\n                        if (cur.indexOf(\"user_\") !== -1) {\n                            return {\n                                ...acc,\n                                user_info: {\n                                    ...acc.user_info,\n                                    [cur]: _post[cur]\n                                }\n                            };\n                        }\n                        return {\n                            ...acc,\n                            [cur]: _post[cur]\n                        }\n                    }, {\n                        id: doc.id,\n                        user_info: {}\n                    });\n                    dispatch(setPost([post]), {start:null, next: null, size:3})\n        })\n    }\n}\n\n// reducer draft 검색하기\nexport default handleActions(\n    {\n        [SET_POST]: (state, action) =>\n          produce(state, (draft) => {\n            draft.list.push(...action.payload.post_list);\n\n            draft.lis = draft.list.reduce((acc, cur) => {\n                if(acc.findIndex(a => a.id === cur.id) === -1){\n                    return [...acc, cur];\n                }else{\n                    acc[acc.findIndex(a => a.id === cur.id)] = cur;\n                    return acc;\n                }\n            }, []);\n\n            draft.paging = action.payload.paging;\n            draft.is_loading = false ;\n          }),\n    \n        [ADD_POST]: (state, action) =>\n          produce(state, (draft) => {\n            draft.list.unshift(action.payload.post);\n          }),\n        [EDIT_POST]: (state, action) =>\n          produce(state, (draft) => {\n            let idx = draft.list.findIndex((p) => p.id === action.payload.post_id);\n    \n            draft.list[idx] = { ...draft.list[idx], ...action.payload.post };\n          }),\n          [LOADING]: (state, action) => produce(state, (draft) => {\n              draft.is_loading = action.payload.is_loading;\n          })\n      },\n      initialState\n    );\n\n// action creator export\nconst actionCreators = {\n    setPost,\n    addPost,\n    getPostFB,\n    addPostFB,\n    editPostFB,\n};\n\nexport {\n    actionCreators\n};"]},"metadata":{},"sourceType":"module"}