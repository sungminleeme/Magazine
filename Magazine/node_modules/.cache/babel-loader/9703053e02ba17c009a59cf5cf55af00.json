{"ast":null,"code":"import { createAction, handleActions } from \"redux-actions\";\nimport { produce } from \"immer\";\nimport { firestore } from \"../../shared/firebase\";\nconst SET_POST = \"SET_POST\";\nconst ADD_POST = \"ADD_POST\";\nconst setPost = createAction(SET_POST, post_list => ({\n  post_list\n}));\nconst addPost = createAction(ADD_POST, post => ({\n  post\n}));\nconst initialState = {\n  list: []\n};\nconst initialPost = {\n  id: 0,\n  user_info: {\n    user_name: \"mean0\",\n    user_profile: \"https://likerdo-bucket-list.s3.ap-northeast-2.amazonaws.com/yui.jpg\"\n  },\n  image_url: \"https://likerdo-bucket-list.s3.ap-northeast-2.amazonaws.com/yui.jpg\",\n  contents: \"강아지네요!\",\n  comment_cnt: 10,\n  insert_dt: \"2021-02-27 10:00:00\"\n};\n\nconst getPostFB = () => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    const postDB = firestore.collection(\"post\");\n    postDB.get().then(docs => {\n      docs.forEach(doc => {\n        console.log(doc.id, doc.data());\n        let _post = {\n          id: doc.id,\n          ...doc.data()\n        };\n        let post = {\n          id: doc.id,\n          user_info: {\n            user_name: _post.user_name,\n            user_profile: _post.user_profile,\n            user_id: _post.user_id\n          },\n          image_url: _post.image_url,\n          contents: _post.contents,\n          comment_cnt: _post.comment_cnt,\n          insert_dt: _post.insert_dt\n        };\n      });\n    });\n  };\n}; // reducer\n// draft 검색하기 \n\n\nexport default handleActions({\n  [SET_POST]: (state, action) => produce(state, draft => {}),\n  [ADD_POST]: (state, action) => produce(state, draft => {})\n}, initialState); // action creator export\n\nconst actionCreators = {\n  setPost,\n  addPost,\n  getPostFB\n};\nexport { actionCreators };","map":{"version":3,"sources":["/Users/a111/Desktop/무제 폴더 2/image-community /src/redux/modules/post.js"],"names":["createAction","handleActions","produce","firestore","SET_POST","ADD_POST","setPost","post_list","addPost","post","initialState","list","initialPost","id","user_info","user_name","user_profile","image_url","contents","comment_cnt","insert_dt","getPostFB","dispatch","getState","history","postDB","collection","get","then","docs","forEach","doc","console","log","data","_post","user_id","state","action","draft","actionCreators"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,aAAvB,QAA4C,eAA5C;AACA,SAASC,OAAT,QAAwB,OAAxB;AACA,SAASC,SAAT,QAA0B,uBAA1B;AAEA,MAAMC,QAAQ,GAAG,UAAjB;AACA,MAAMC,QAAQ,GAAG,UAAjB;AAEA,MAAMC,OAAO,GAAGN,YAAY,CAACI,QAAD,EAAYG,SAAD,KAAgB;AAACA,EAAAA;AAAD,CAAhB,CAAX,CAA5B;AACA,MAAMC,OAAO,GAAGR,YAAY,CAACK,QAAD,EAAYI,IAAD,KAAW;AAACA,EAAAA;AAAD,CAAX,CAAX,CAA5B;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,IAAI,EAAE;AADW,CAArB;AAIA,MAAMC,WAAW,GAAG;AAChBC,EAAAA,EAAE,EAAC,CADa;AAEhBC,EAAAA,SAAS,EAAE;AACPC,IAAAA,SAAS,EAAE,OADJ;AAEPC,IAAAA,YAAY,EAAE;AAFP,GAFK;AAKhBC,EAAAA,SAAS,EAAE,qEALK;AAMhBC,EAAAA,QAAQ,EAAE,QANM;AAOhBC,EAAAA,WAAW,EAAE,EAPG;AAQhBC,EAAAA,SAAS,EAAE;AARK,CAApB;;AAWA,MAAMC,SAAS,GAAG,MAAM;AACpB,SAAO,UAAUC,QAAV,EAAoBC,QAApB,EAA8B;AAACC,IAAAA;AAAD,GAA9B,EAAwC;AAC3C,UAAMC,MAAM,GAAGtB,SAAS,CAACuB,UAAV,CAAqB,MAArB,CAAf;AAEAD,IAAAA,MAAM,CAACE,GAAP,GAAaC,IAAb,CAAmBC,IAAD,IAAU;AACxBA,MAAAA,IAAI,CAACC,OAAL,CAAcC,GAAD,IAAQ;AACjBC,QAAAA,OAAO,CAACC,GAAR,CAAYF,GAAG,CAAClB,EAAhB,EAAoBkB,GAAG,CAACG,IAAJ,EAApB;AAEA,YAAIC,KAAK,GAAG;AACRtB,UAAAA,EAAE,EAAEkB,GAAG,CAAClB,EADA;AAER,aAAGkB,GAAG,CAACG,IAAJ;AAFK,SAAZ;AAKA,YAAIzB,IAAI,GAAG;AACPI,UAAAA,EAAE,EAAEkB,GAAG,CAAClB,EADD;AAEPC,UAAAA,SAAS,EAAE;AACPC,YAAAA,SAAS,EAAEoB,KAAK,CAACpB,SADV;AAEPC,YAAAA,YAAY,EAAEmB,KAAK,CAACnB,YAFb;AAGPoB,YAAAA,OAAO,EAAED,KAAK,CAACC;AAHR,WAFJ;AAOPnB,UAAAA,SAAS,EAAEkB,KAAK,CAAClB,SAPV;AAQPC,UAAAA,QAAQ,EAAEiB,KAAK,CAACjB,QART;AASPC,UAAAA,WAAW,EAAEgB,KAAK,CAAChB,WATZ;AAUPC,UAAAA,SAAS,EAAEe,KAAK,CAACf;AAVV,SAAX;AAaH,OArBD;AAsBH,KAvBD;AAwBH,GA3BD;AA4BH,CA7BD,C,CA+BA;AACA;;;AACA,eAAenB,aAAa,CACxB;AACI,GAACG,QAAD,GAAY,CAACiC,KAAD,EAAQC,MAAR,KAAmBpC,OAAO,CAACmC,KAAD,EAASE,KAAD,IAAW,CAExD,CAFqC,CAD1C;AAKI,GAAClC,QAAD,GAAY,CAACgC,KAAD,EAAQC,MAAR,KAAmBpC,OAAO,CAACmC,KAAD,EAASE,KAAD,IAAW,CAExD,CAFqC;AAL1C,CADwB,EAUxB7B,YAVwB,CAA5B,C,CAaE;;AACF,MAAM8B,cAAc,GAAG;AACnBlC,EAAAA,OADmB;AAEnBE,EAAAA,OAFmB;AAGnBa,EAAAA;AAHmB,CAAvB;AAME,SAASmB,cAAT","sourcesContent":["import { createAction, handleActions } from \"redux-actions\";\nimport { produce } from \"immer\";\nimport { firestore } from \"../../shared/firebase\";\n\nconst SET_POST = \"SET_POST\";\nconst ADD_POST = \"ADD_POST\";\n\nconst setPost = createAction(SET_POST, (post_list) => ({post_list}));\nconst addPost = createAction(ADD_POST, (post) => ({post}));\n\nconst initialState = {\n    list: [],\n}\n\nconst initialPost = {\n    id:0,\n    user_info: {\n        user_name: \"mean0\",\n        user_profile: \"https://likerdo-bucket-list.s3.ap-northeast-2.amazonaws.com/yui.jpg\"},\n    image_url: \"https://likerdo-bucket-list.s3.ap-northeast-2.amazonaws.com/yui.jpg\",\n    contents: \"강아지네요!\",\n    comment_cnt: 10,\n    insert_dt: \"2021-02-27 10:00:00\"\n}\n\nconst getPostFB = () => {\n    return function (dispatch, getState, {history}){\n        const postDB = firestore.collection(\"post\");\n\n        postDB.get().then((docs) => {\n            docs.forEach((doc) =>{\n                console.log(doc.id, doc.data());\n\n                let _post = {\n                    id: doc.id,\n                    ...doc.data()\n                };\n\n                let post = {\n                    id: doc.id,\n                    user_info: {\n                        user_name: _post.user_name,\n                        user_profile: _post.user_profile,\n                        user_id: _post.user_id,\n                    },\n                    image_url: _post.image_url,\n                    contents: _post.contents,\n                    comment_cnt: _post.comment_cnt,\n                    insert_dt: _post.insert_dt,\n                }\n\n            })\n        })\n    }\n}\n\n// reducer\n// draft 검색하기 \nexport default handleActions(\n    {\n        [SET_POST]: (state, action) => produce(state, (draft) => {\n          \n        }),\n  \n        [ADD_POST]: (state, action) => produce(state, (draft) => {\n            \n        })\n    },\n    initialState\n  );\n\n  // action creator export\nconst actionCreators = {\n    setPost,\n    addPost,\n    getPostFB,\n  };\n  \n  export { actionCreators };"]},"metadata":{},"sourceType":"module"}