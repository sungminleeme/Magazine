{"ast":null,"code":"import { createAction, handleActions } from \"redux-actions\";\nimport { produce } from \"immer\";\nimport { firestore, storage } from \"../../shared/firebase\";\nimport \"moment\";\nimport moment from \"moment\";\nimport { actionCreators as imageActions } from \"./image\";\nconst SET_POST = \"SET_POST\";\nconst ADD_POST = \"ADD_POST\";\nconst EDIT_POST = \"EDIT_POST\";\nconst LOADING = \"LOADING\";\nconst LIKE_TOGGLE = \"LIKE_TOGGLE\";\nconst setPost = createAction(SET_POST, (post_list, paging) => ({\n  post_list,\n  paging\n}));\nconst addPost = createAction(ADD_POST, post => ({\n  post\n}));\nconst editPost = createAction(EDIT_POST, (post_id, post) => ({\n  post_id,\n  post\n}));\nconst loading = createAction(LOADING, is_loading => ({\n  is_loading\n}));\nconst likeToggle = createAction(LIKE_TOGGLE, (post_id, is_like = null) => ({\n  post_id,\n  is_like\n}));\nconst initialState = {\n  list: [],\n  paging: {\n    start: null,\n    next: null,\n    size: 3\n  },\n  is_loading: false,\n  is_like: false\n};\nconst initialPost = {\n  // id: 0,\n  // user_info: {\n  //   user_name: \"mean0\",\n  //   user_profile: \"https://mean0images.s3.ap-northeast-2.amazonaws.com/4.jpeg\",\n  // },\n  image_url: \"https://mean0images.s3.ap-northeast-2.amazonaws.com/4.jpeg\",\n  contents: \"\",\n  layout_type: \"a\",\n  comment_cnt: 0,\n  insert_dt: moment().format(\"YYYY-MM-DD hh:mm:ss\")\n};\n\nconst editPostFB = (post_id = null, post = {}) => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    if (!post_id) {\n      console.log(\"게시물 정보가 없어요!\");\n      return;\n    }\n\n    const _image = getState().image.preview;\n\n    const _post_idx = getState().post.list.findIndex(p => p.id === post_id);\n\n    const _post = getState().post.list[_post_idx];\n\n    console.log(_post);\n    const postDB = firestore.collection(\"post\");\n\n    if (_image === _post.image_url) {\n      postDB.doc(post_id).update(post).then(doc => {\n        dispatch(editPost(post_id, { ...post\n        }));\n        history.replace(\"/\");\n      });\n      return;\n    } else {\n      const user_id = getState().user.user.uid;\n\n      const _upload = storage.ref(`images/${user_id}_${new Date().getTime()}`).putString(_image, \"data_url\");\n\n      _upload.then(snapshot => {\n        snapshot.ref.getDownloadURL().then(url => {\n          console.log(url);\n          return url;\n        }).then(url => {\n          postDB.doc(post_id).update({ ...post,\n            image_url: url\n          }).then(doc => {\n            dispatch(editPost(post_id, { ...post,\n              image_url: url\n            }));\n            history.replace(\"/\");\n          });\n        }).catch(err => {\n          window.alert(\"앗! 이미지 업로드에 문제가 있어요!\");\n          console.log(\"앗! 이미지 업로드에 문제가 있어요!\", err);\n        });\n      });\n    }\n  };\n};\n\nconst addPostFB = (contents = \"\", layout_type = \"a\") => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    const postDB = firestore.collection(\"post\");\n    const _user = getState().user.user;\n    const user_info = {\n      user_name: _user.user_name,\n      user_id: _user.uid,\n      user_profile: _user.user_profile\n    };\n    const _post = { ...initialPost,\n      contents: contents,\n      layout_type: layout_type,\n      insert_dt: moment().format(\"YYYY-MM-DD hh:mm:ss\")\n    };\n    const _image = getState().image.preview;\n\n    if (!_image) {\n      window.alert(\"이미지가 필요해요!\");\n      return;\n    }\n\n    const _upload = storage.ref(`images/${user_info.user_id}_${new Date().getTime()}`).putString(_image, \"data_url\");\n\n    _upload.then(snapshot => {\n      snapshot.ref.getDownloadURL().then(url => {\n        console.log(url);\n        return url;\n      }).then(url => {\n        postDB.add({ ...user_info,\n          ..._post,\n          image_url: url\n        }).then(doc => {\n          let post = {\n            user_info,\n            ..._post,\n            id: doc.id,\n            image_url: url\n          };\n          dispatch(addPost(post));\n          history.replace(\"/\");\n          dispatch(imageActions.setPreview(null));\n        }).catch(err => {\n          window.alert(\"앗! 포스트 작성에 문제가 있어요!\");\n          console.log(\"post 작성에 실패했어요!\", err);\n        });\n      }).catch(err => {\n        window.alert(\"앗! 이미지 업로드에 문제가 있어요!\");\n        console.log(\"앗! 이미지 업로드에 문제가 있어요!\", err);\n      });\n    });\n  };\n};\n\nconst getPostFB = (start = null, size = 3) => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    let _paging = getState().post.paging;\n\n    if (_paging.start && !_paging.next) {\n      return;\n    }\n\n    dispatch(loading(true));\n    const postDB = firestore.collection(\"post\");\n    let query = postDB.orderBy(\"insert_dt\", \"desc\");\n\n    if (start) {\n      query = query.startAt(start);\n    }\n\n    query.limit(size + 1).get().then(docs => {\n      let post_list = [];\n      let paging = {\n        start: docs.docs[0],\n        next: docs.docs.length === size + 1 ? docs.docs[docs.docs.length - 1] : null,\n        size: size\n      };\n      docs.forEach(doc => {\n        let _post = doc.data(); // ['commenct_cnt', 'contents', ..]\n\n\n        let post = Object.keys(_post).reduce((acc, cur) => {\n          if (cur.indexOf(\"user_\") !== -1) {\n            return { ...acc,\n              user_info: { ...acc.user_info,\n                [cur]: _post[cur]\n              }\n            };\n          }\n\n          return { ...acc,\n            [cur]: _post[cur]\n          };\n        }, {\n          id: doc.id,\n          user_info: {}\n        });\n        post_list.push(post);\n      });\n      post_list.pop();\n      console.log(post_list);\n      dispatch(setPost(post_list, paging));\n    });\n  };\n};\n\nconst getOnePostFB = id => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    const postDB = firestore.collection(\"post\");\n    postDB.doc(id).get().then(doc => {\n      console.log(doc);\n      console.log(doc.data());\n\n      let _post = doc.data();\n\n      let post = Object.keys(_post).reduce((acc, cur) => {\n        if (cur.indexOf(\"user_\") !== -1) {\n          return { ...acc,\n            user_info: { ...acc.user_info,\n              [cur]: _post[cur]\n            }\n          };\n        }\n\n        return { ...acc,\n          [cur]: _post[cur]\n        };\n      }, {\n        id: doc.id,\n        user_info: {}\n      });\n      dispatch(setPost([post]));\n    });\n  };\n};\n\nexport default handleActions({\n  [SET_POST]: (state, action) => produce(state, draft => {\n    draft.list.push(...action.payload.post_list);\n    draft.list = draft.list.reduce((acc, cur) => {\n      if (acc.findIndex(a => a.id === cur.id) === -1) {\n        return [...acc, cur];\n      } else {\n        acc[acc.findIndex(a => a.id === cur.id)] = cur;\n        return acc;\n      }\n    }, []);\n\n    if (action.payload.paging) {\n      draft.paging = action.payload.paging;\n    }\n\n    draft.is_loading = false;\n  }),\n  [ADD_POST]: (state, action) => produce(state, draft => {\n    draft.list.unshift(action.payload.post);\n  }),\n  [EDIT_POST]: (state, action) => produce(state, draft => {\n    let idx = draft.list.findIndex(p => p.id === action.payload.post_id);\n    draft.list[idx] = { ...draft.list[idx],\n      ...action.payload.post\n    };\n  }),\n  [LOADING]: (state, action) => produce(state, draft => {\n    draft.is_loading = action.payload.is_loading;\n  })\n}, initialState);\nconst actionCreators = {\n  setPost,\n  addPost,\n  editPost,\n  getPostFB,\n  addPostFB,\n  editPostFB,\n  getOnePostFB\n};\nexport { actionCreators };","map":{"version":3,"sources":["/Users/a111/Desktop/무제 폴더 2/image-community /src/redux/modules/post.js"],"names":["createAction","handleActions","produce","firestore","storage","moment","actionCreators","imageActions","SET_POST","ADD_POST","EDIT_POST","LOADING","LIKE_TOGGLE","setPost","post_list","paging","addPost","post","editPost","post_id","loading","is_loading","likeToggle","is_like","initialState","list","start","next","size","initialPost","image_url","contents","layout_type","comment_cnt","insert_dt","format","editPostFB","dispatch","getState","history","console","log","_image","image","preview","_post_idx","findIndex","p","id","_post","postDB","collection","doc","update","then","replace","user_id","user","uid","_upload","ref","Date","getTime","putString","snapshot","getDownloadURL","url","catch","err","window","alert","addPostFB","_user","user_info","user_name","user_profile","add","setPreview","getPostFB","_paging","query","orderBy","startAt","limit","get","docs","length","forEach","data","Object","keys","reduce","acc","cur","indexOf","push","pop","getOnePostFB","state","action","draft","payload","a","unshift","idx"],"mappings":"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","sourcesContent":["import { createAction, handleActions } from \"redux-actions\";\nimport { produce } from \"immer\";\nimport { firestore, storage } from \"../../shared/firebase\";\nimport \"moment\";\nimport moment from \"moment\";\n\nimport { actionCreators as imageActions } from \"./image\";\n\nconst SET_POST = \"SET_POST\";\nconst ADD_POST = \"ADD_POST\";\nconst EDIT_POST = \"EDIT_POST\";\nconst LOADING = \"LOADING\";\nconst LIKE_TOGGLE = \"LIKE_TOGGLE\";\n\nconst setPost = createAction(SET_POST, (post_list, paging) => ({ post_list, paging }));\nconst addPost = createAction(ADD_POST, (post) => ({ post }));\nconst editPost = createAction(EDIT_POST, (post_id, post) => ({\n  post_id,\n  post,\n}));\nconst loading = createAction(LOADING, (is_loading) => ({ is_loading }));\n\nconst likeToggle = createAction(LIKE_TOGGLE, (post_id, is_like = null) => ({\n  post_id,\n  is_like,\n}))\n\n\nconst initialState = {\n  list: [],\n  paging: { start: null, next: null, size: 3 },\n  is_loading: false,\n  is_like: false,\n};\n\nconst initialPost = {\n  // id: 0,\n  // user_info: {\n  //   user_name: \"mean0\",\n  //   user_profile: \"https://mean0images.s3.ap-northeast-2.amazonaws.com/4.jpeg\",\n  // },\n  image_url: \"https://mean0images.s3.ap-northeast-2.amazonaws.com/4.jpeg\",\n  contents: \"\",\n  layout_type: \"a\",\n  comment_cnt: 0,\n  insert_dt: moment().format(\"YYYY-MM-DD hh:mm:ss\"),\n};\n\nconst editPostFB = (post_id = null, post = {}) => {\n  return function (dispatch, getState, { history }) {\n    if (!post_id) {\n      console.log(\"게시물 정보가 없어요!\");\n      return;\n    }\n\n    const _image = getState().image.preview;\n\n    const _post_idx = getState().post.list.findIndex((p) => p.id === post_id);\n    const _post = getState().post.list[_post_idx];\n\n    console.log(_post);\n\n    const postDB = firestore.collection(\"post\");\n\n    if (_image === _post.image_url) {\n      postDB\n        .doc(post_id)\n        .update(post)\n        .then((doc) => {\n          dispatch(editPost(post_id, { ...post }));\n          history.replace(\"/\");\n        });\n\n      return;\n    } else {\n      const user_id = getState().user.user.uid;\n      const _upload = storage\n        .ref(`images/${user_id}_${new Date().getTime()}`)\n        .putString(_image, \"data_url\");\n\n      _upload.then((snapshot) => {\n        snapshot.ref\n          .getDownloadURL()\n          .then((url) => {\n            console.log(url);\n\n            return url;\n          })\n          .then((url) => {\n            postDB\n              .doc(post_id)\n              .update({ ...post, image_url: url })\n              .then((doc) => {\n                dispatch(editPost(post_id, { ...post, image_url: url }));\n                history.replace(\"/\");\n              });\n          })\n          .catch((err) => {\n            window.alert(\"앗! 이미지 업로드에 문제가 있어요!\");\n            console.log(\"앗! 이미지 업로드에 문제가 있어요!\", err);\n          });\n      });\n    }\n  };\n};\n\nconst addPostFB = (contents = \"\", layout_type = \"a\") => {\n  return function (dispatch, getState, { history }) {\n    const postDB = firestore.collection(\"post\");\n\n    const _user = getState().user.user;\n\n    const user_info = {\n      user_name: _user.user_name,\n      user_id: _user.uid,\n      user_profile: _user.user_profile,\n    };\n\n    const _post = {\n      ...initialPost,\n      contents: contents,\n      layout_type: layout_type,\n      insert_dt: moment().format(\"YYYY-MM-DD hh:mm:ss\"),\n    };\n\n    const _image = getState().image.preview;\n\n    if (!_image) {\n      window.alert(\"이미지가 필요해요!\");\n      return;\n    }\n\n    const _upload = storage\n      .ref(`images/${user_info.user_id}_${new Date().getTime()}`)\n      .putString(_image, \"data_url\");\n\n    _upload.then((snapshot) => {\n      snapshot.ref\n        .getDownloadURL()\n        .then((url) => {\n          console.log(url);\n\n          return url;\n        })\n        .then((url) => {\n          postDB\n            .add({ ...user_info, ..._post, image_url: url })\n            .then((doc) => {\n              let post = { user_info, ..._post, id: doc.id, image_url: url };\n              dispatch(addPost(post));\n              history.replace(\"/\");\n\n              dispatch(imageActions.setPreview(null));\n            })\n            .catch((err) => {\n              window.alert(\"앗! 포스트 작성에 문제가 있어요!\");\n              console.log(\"post 작성에 실패했어요!\", err);\n            });\n        })\n        .catch((err) => {\n          window.alert(\"앗! 이미지 업로드에 문제가 있어요!\");\n          console.log(\"앗! 이미지 업로드에 문제가 있어요!\", err);\n        });\n    });\n  };\n};\n\nconst getPostFB = (start = null, size = 3) => {\n  return function (dispatch, getState, { history }) {\n\n    let _paging = getState().post.paging;\n\n    if(_paging.start && !_paging.next){\n      return;\n    }\n\n    dispatch(loading(true));\n    const postDB = firestore.collection(\"post\");\n\n    let query = postDB.orderBy(\"insert_dt\", \"desc\");\n\n    if(start){\n      query = query.startAt(start);\n    }\n\n\n    query\n      .limit(size + 1)\n      .get()\n      .then((docs) => {\n        let post_list = [];\n\n        let paging = {\n          start: docs.docs[0],\n          next: docs.docs.length === size+1? docs.docs[docs.docs.length -1] : null,\n          size: size,\n        }\n\n        docs.forEach((doc) => {\n          let _post = doc.data();\n\n          // ['commenct_cnt', 'contents', ..]\n          let post = Object.keys(_post).reduce(\n            (acc, cur) => {\n              if (cur.indexOf(\"user_\") !== -1) {\n                return {\n                  ...acc,\n                  user_info: { ...acc.user_info, [cur]: _post[cur] },\n                };\n              }\n              return { ...acc, [cur]: _post[cur] };\n            },\n            { id: doc.id, user_info: {} }\n          );\n\n          post_list.push(post);\n        });\n\n        post_list.pop();\n\n        console.log(post_list);\n\n        dispatch(setPost(post_list, paging));\n      });\n  };\n};\n\nconst getOnePostFB = (id) => {\n  return function(dispatch, getState, {history}){\n    const postDB = firestore.collection(\"post\");\n    postDB\n      .doc(id)\n      .get()\n      .then((doc) => {\n        console.log(doc);\n        console.log(doc.data());\n\n        let _post = doc.data();\n        let post = Object.keys(_post).reduce(\n          (acc, cur) => {\n            if (cur.indexOf(\"user_\") !== -1) {\n              return {\n                ...acc,\n                user_info: { ...acc.user_info, [cur]: _post[cur] },\n              };\n            }\n            return { ...acc, [cur]: _post[cur] };\n          },\n          { id: doc.id, user_info: {} }\n        );\n\n        dispatch(setPost([post]));\n      });\n  }\n}\n\nexport default handleActions(\n  {\n    [SET_POST]: (state, action) =>\n      produce(state, (draft) => {\n        draft.list.push(...action.payload.post_list);\n\n        draft.list = draft.list.reduce((acc, cur) => {\n          if(acc.findIndex(a => a.id === cur.id) === -1){\n            return [...acc, cur];\n          }else{\n            acc[acc.findIndex((a) => a.id === cur.id)] = cur;\n            return acc;\n          }\n        }, []);\n\n\n        if(action.payload.paging){\n          draft.paging = action.payload.paging;\n        }\n        \n        draft.is_loading = false;\n      }),\n\n    [ADD_POST]: (state, action) =>\n      produce(state, (draft) => {\n        draft.list.unshift(action.payload.post);\n      }),\n    [EDIT_POST]: (state, action) =>\n      produce(state, (draft) => {\n        let idx = draft.list.findIndex((p) => p.id === action.payload.post_id);\n\n        draft.list[idx] = { ...draft.list[idx], ...action.payload.post };\n      }),\n      [LOADING]: (state, action) => produce(state, (draft) => {\n        draft.is_loading = action.payload.is_loading;\n      })\n  },\n  initialState\n);\n\nconst actionCreators = {\n  setPost,\n  addPost,\n  editPost,\n  getPostFB,\n  addPostFB,\n  editPostFB,\n  getOnePostFB,\n};\n\nexport { actionCreators };\n"]},"metadata":{},"sourceType":"module"}