{"ast":null,"code":"import { createAction, handleActions } from \"redux-actions\";\nimport { produce } from \"immer\";\nimport { firestore, storage } from \"../../shared/firebase\";\nimport \"moment\";\nimport moment from \"moment\";\nimport { actionCreators as imageActions } from \"./image\";\nconst SET_POST = \"SET_POST\";\nconst ADD_POST = \"ADD_POST\";\nconst setPost = createAction(SET_POST, post_list => ({\n  post_list\n}));\nconst addPost = createAction(ADD_POST, post => ({\n  post\n}));\nconst initialState = {\n  list: []\n};\nconst initialPost = {\n  // id: 0, user_info: {     user_name: \"mean0\",     user_profile:\n  // \"https://likerdo-bucket-list.s3.ap-northeast-2.amazonaws.com/yui.jpg\" },\n  image_url: \"https://likerdo-bucket-list.s3.ap-northeast-2.amazonaws.com/yui.jpg\",\n  contents: \"\",\n  comment_cnt: 0,\n  insert_dt: moment().format(\"YYYY-MM-DD hh:mm:ss\")\n};\n\nconst addPostFB = (contents = \"\") => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    const postDB = firestore.collection(\"post\");\n    const _user = getState().user.user;\n    const user_info = {\n      user_name: _user.user_name,\n      user_id: _user.uid,\n      user_profile: _user.user_profile\n    };\n    const _post = { ...initialPost,\n      contents: contents,\n      insert_dt: moment().format(\"YYYY-MM-DD hh:mm:ss\")\n    };\n    const _image = getState().image.preview;\n    console.log(_image);\n    console.log(typeof _image);\n\n    const _upload = storage.ref(`images/${user_info.user_id}_${new Date().getTime()}`).putString(_image, \"data_url\");\n\n    _upload.then(snapshot => {\n      snapshot.ref.getDownloadURL().then(url => {\n        // url을 확인해봐요!\n        console.log(url);\n        dispatch(imageActions.uploadImage(url));\n        return url;\n      }).then(url => {\n        postDB.add({ ...user_info,\n          ..._post,\n          image_url: url\n        }).then(doc => {\n          let post = {\n            user_info,\n            ..._post,\n            id: doc.id\n          };\n          dispatch(addPost(post));\n          history.replace(\"/\");\n          dispatch(imageActions.setPreview(null));\n        }).catch(err => {\n          window.alert(\"앗! 포스트 작성에 문제가 있어요!\");\n          console.log(\"작성에 실패\", err);\n        });\n      }).catcg(err => {\n        window.alert(\"앗! 이미지 업로드에 문제가 있어요!\");\n        console.log(\"이미지 업로드에 문제\", err);\n      });\n    });\n  };\n};\n\nconst getPostFB = () => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    const postDB = firestore.collection(\"post\");\n    postDB.get().then(docs => {\n      let post_list = [];\n      docs.forEach(doc => {\n        let _post = doc.data(); // ['commenct_cnt', 'contents', ..] reduce 함수 공부 /3-3강 18분 설명\n\n\n        let post = Object.keys(_post).reduce((acc, cur) => {\n          if (cur.indexOf(\"user_\") !== -1) {\n            return { ...acc,\n              user_info: { ...acc.user_info,\n                [cur]: _post[cur]\n              }\n            };\n          }\n\n          return { ...acc,\n            [cur]: _post[cur]\n          };\n        }, {\n          id: doc.id,\n          user_info: {}\n        }); // let _post = {     id: doc.id,     ...doc.data() }; let post = {     id:\n        // doc.id,     user_info: {         user_name: _post.user_name, user_profile:\n        // _post.user_profile,         user_id: _post.user_id,     }, image_url:\n        // _post.image_url,     contents: _post.contents,     comment_cnt:\n        // _post.comment_cnt,     insert_dt: _post.insert_dt, }; post_list.push(post);\n\n        post_list.push(post);\n      });\n      console.log(post_list);\n      dispatch(setPost(post_list));\n    });\n  };\n}; // reducer draft 검색하기\n\n\nexport default handleActions({\n  [SET_POST]: (state, action) => produce(state, draft => {\n    draft.list = action.payload.post_list;\n  }),\n  [ADD_POST]: (state, action) => produce(state, draft => {\n    draft.list.unshift(action.payload.post);\n  })\n}, initialState); // action creator export\n\nconst actionCreators = {\n  setPost,\n  addPost,\n  getPostFB,\n  addPostFB\n};\nexport { actionCreators };","map":{"version":3,"sources":["/Users/a111/Desktop/무제 폴더 2/image-community /src/redux/modules/post.js"],"names":["createAction","handleActions","produce","firestore","storage","moment","actionCreators","imageActions","SET_POST","ADD_POST","setPost","post_list","addPost","post","initialState","list","initialPost","image_url","contents","comment_cnt","insert_dt","format","addPostFB","dispatch","getState","history","postDB","collection","_user","user","user_info","user_name","user_id","uid","user_profile","_post","_image","image","preview","console","log","_upload","ref","Date","getTime","putString","then","snapshot","getDownloadURL","url","uploadImage","add","doc","id","replace","setPreview","catch","err","window","alert","catcg","getPostFB","get","docs","forEach","data","Object","keys","reduce","acc","cur","indexOf","push","state","action","draft","payload","unshift"],"mappings":"AAAA,SAAQA,YAAR,EAAsBC,aAAtB,QAA0C,eAA1C;AACA,SAAQC,OAAR,QAAsB,OAAtB;AACA,SAAQC,SAAR,EAAmBC,OAAnB,QAAiC,uBAAjC;AACA,OAAO,QAAP;AACA,OAAOC,MAAP,MAAmB,QAAnB;AAGA,SAAQC,cAAc,IAAIC,YAA1B,QAA6C,SAA7C;AAEA,MAAMC,QAAQ,GAAG,UAAjB;AACA,MAAMC,QAAQ,GAAG,UAAjB;AAEA,MAAMC,OAAO,GAAGV,YAAY,CAACQ,QAAD,EAAYG,SAAD,KAAgB;AAACA,EAAAA;AAAD,CAAhB,CAAX,CAA5B;AACA,MAAMC,OAAO,GAAGZ,YAAY,CAACS,QAAD,EAAYI,IAAD,KAAW;AAACA,EAAAA;AAAD,CAAX,CAAX,CAA5B;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,IAAI,EAAE;AADW,CAArB;AAIA,MAAMC,WAAW,GAAG;AAChB;AACA;AACAC,EAAAA,SAAS,EAAE,qEAHK;AAIhBC,EAAAA,QAAQ,EAAE,EAJM;AAKhBC,EAAAA,WAAW,EAAE,CALG;AAMhBC,EAAAA,SAAS,EAAEf,MAAM,GAAGgB,MAAT,CAAgB,qBAAhB;AANK,CAApB;;AASA,MAAMC,SAAS,GAAG,CAACJ,QAAQ,GAAG,EAAZ,KAAoB;AAClC,SAAO,UAAUK,QAAV,EAAoBC,QAApB,EAA8B;AAACC,IAAAA;AAAD,GAA9B,EAAyC;AAC5C,UAAMC,MAAM,GAAGvB,SAAS,CAACwB,UAAV,CAAqB,MAArB,CAAf;AAEA,UAAMC,KAAK,GAAGJ,QAAQ,GAAGK,IAAX,CAAgBA,IAA9B;AAEA,UAAMC,SAAS,GAAG;AACdC,MAAAA,SAAS,EAAEH,KAAK,CAACG,SADH;AAEdC,MAAAA,OAAO,EAAEJ,KAAK,CAACK,GAFD;AAGdC,MAAAA,YAAY,EAAEN,KAAK,CAACM;AAHN,KAAlB;AAKA,UAAMC,KAAK,GAAG,EACV,GAAGnB,WADO;AAEVE,MAAAA,QAAQ,EAAEA,QAFA;AAGVE,MAAAA,SAAS,EAAEf,MAAM,GAAGgB,MAAT,CAAgB,qBAAhB;AAHD,KAAd;AAMA,UAAMe,MAAM,GAAGZ,QAAQ,GAAGa,KAAX,CAAiBC,OAAhC;AAEAC,IAAAA,OAAO,CAACC,GAAR,CAAYJ,MAAZ;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAOJ,MAAnB;;AAEA,UAAMK,OAAO,GAAGrC,OAAO,CAClBsC,GADW,CAEP,UAASZ,SAAS,CAACE,OAAQ,IAAG,IAAIW,IAAJ,GAAWC,OAAX,EAAqB,EAF5C,EAIXC,SAJW,CAIDT,MAJC,EAIO,UAJP,CAAhB;;AAMAK,IAAAA,OAAO,CAACK,IAAR,CAAcC,QAAD,IAAc;AACvBA,MAAAA,QAAQ,CACHL,GADL,CAEKM,cAFL,GAGKF,IAHL,CAGWG,GAAD,IAAS;AACX;AACAV,QAAAA,OAAO,CAACC,GAAR,CAAYS,GAAZ;AACA1B,QAAAA,QAAQ,CAAChB,YAAY,CAAC2C,WAAb,CAAyBD,GAAzB,CAAD,CAAR;AACA,eAAOA,GAAP;AACH,OARL,EASKH,IATL,CASUG,GAAG,IAAI;AACTvB,QAAAA,MAAM,CACDyB,GADL,CACS,EACD,GAAGrB,SADF;AAED,aAAGK,KAFF;AAGDlB,UAAAA,SAAS,EAAEgC;AAHV,SADT,EAMKH,IANL,CAMWM,GAAD,IAAS;AACX,cAAIvC,IAAI,GAAG;AACPiB,YAAAA,SADO;AAEP,eAAGK,KAFI;AAGPkB,YAAAA,EAAE,EAAED,GAAG,CAACC;AAHD,WAAX;AAKA9B,UAAAA,QAAQ,CAACX,OAAO,CAACC,IAAD,CAAR,CAAR;AACAY,UAAAA,OAAO,CAAC6B,OAAR,CAAgB,GAAhB;AACA/B,UAAAA,QAAQ,CAAChB,YAAY,CAACgD,UAAb,CAAwB,IAAxB,CAAD,CAAR;AACH,SAfL,EAgBKC,KAhBL,CAgBYC,GAAD,IAAS;AACZC,UAAAA,MAAM,CAACC,KAAP,CAAa,qBAAb;AACApB,UAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBiB,GAAtB;AACH,SAnBL;AAoBC,OA9BT,EA8BWG,KA9BX,CA8BkBH,GAAD,IAAS;AACdC,QAAAA,MAAM,CAACC,KAAP,CAAa,sBAAb;AACApB,QAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BiB,GAA3B;AACH,OAjCT;AAkCH,KAnCD;AAqCH,GAhED;AAiEH,CAlED;;AAoEA,MAAMI,SAAS,GAAG,MAAM;AACpB,SAAO,UAAUtC,QAAV,EAAoBC,QAApB,EAA8B;AAACC,IAAAA;AAAD,GAA9B,EAAyC;AAC5C,UAAMC,MAAM,GAAGvB,SAAS,CAACwB,UAAV,CAAqB,MAArB,CAAf;AAEAD,IAAAA,MAAM,CACDoC,GADL,GAEKhB,IAFL,CAEWiB,IAAD,IAAU;AACZ,UAAIpD,SAAS,GAAG,EAAhB;AACAoD,MAAAA,IAAI,CAACC,OAAL,CAAcZ,GAAD,IAAS;AAClB,YAAIjB,KAAK,GAAGiB,GAAG,CAACa,IAAJ,EAAZ,CADkB,CAGlB;;;AACA,YAAIpD,IAAI,GAAGqD,MAAM,CACZC,IADM,CACDhC,KADC,EAENiC,MAFM,CAEC,CAACC,GAAD,EAAMC,GAAN,KAAc;AAElB,cAAIA,GAAG,CAACC,OAAJ,CAAY,OAAZ,MAAyB,CAAC,CAA9B,EAAiC;AAC7B,mBAAO,EACH,GAAGF,GADA;AAEHvC,cAAAA,SAAS,EAAE,EACP,GAAGuC,GAAG,CAACvC,SADA;AAEP,iBAACwC,GAAD,GAAOnC,KAAK,CAACmC,GAAD;AAFL;AAFR,aAAP;AAOH;;AACD,iBAAO,EACH,GAAGD,GADA;AAEH,aAACC,GAAD,GAAOnC,KAAK,CAACmC,GAAD;AAFT,WAAP;AAIH,SAjBM,EAiBJ;AACCjB,UAAAA,EAAE,EAAED,GAAG,CAACC,EADT;AAECvB,UAAAA,SAAS,EAAE;AAFZ,SAjBI,CAAX,CAJkB,CA0BlB;AACA;AACA;AACA;AACA;;AACAnB,QAAAA,SAAS,CAAC6D,IAAV,CAAe3D,IAAf;AACH,OAhCD;AAiCA0B,MAAAA,OAAO,CAACC,GAAR,CAAY7B,SAAZ;AAEAY,MAAAA,QAAQ,CAACb,OAAO,CAACC,SAAD,CAAR,CAAR;AACH,KAxCL;AAyCH,GA5CD;AA6CH,CA9CD,C,CAgDA;;;AACA,eAAeV,aAAa,CAAC;AACzB,GAACO,QAAD,GAAY,CAACiE,KAAD,EAAQC,MAAR,KAAmBxE,OAAO,CAACuE,KAAD,EAASE,KAAD,IAAW;AACrDA,IAAAA,KAAK,CAAC5D,IAAN,GAAa2D,MAAM,CAACE,OAAP,CAAejE,SAA5B;AACH,GAFqC,CADb;AAKzB,GAACF,QAAD,GAAY,CAACgE,KAAD,EAAQC,MAAR,KAAmBxE,OAAO,CAACuE,KAAD,EAASE,KAAD,IAAW;AACrDA,IAAAA,KAAK,CACA5D,IADL,CAEK8D,OAFL,CAEaH,MAAM,CAACE,OAAP,CAAe/D,IAF5B;AAGH,GAJqC;AALb,CAAD,EAUzBC,YAVyB,CAA5B,C,CAYA;;AACA,MAAMR,cAAc,GAAG;AACnBI,EAAAA,OADmB;AAEnBE,EAAAA,OAFmB;AAGnBiD,EAAAA,SAHmB;AAInBvC,EAAAA;AAJmB,CAAvB;AAOA,SACIhB,cADJ","sourcesContent":["import {createAction, handleActions} from \"redux-actions\";\nimport {produce} from \"immer\";\nimport {firestore, storage} from \"../../shared/firebase\";\nimport \"moment\";\nimport moment from \"moment\";\n\n\nimport {actionCreators as imageActions} from \"./image\";\n\nconst SET_POST = \"SET_POST\";\nconst ADD_POST = \"ADD_POST\";\n\nconst setPost = createAction(SET_POST, (post_list) => ({post_list}));\nconst addPost = createAction(ADD_POST, (post) => ({post}));\n\nconst initialState = {\n    list: []\n}\n\nconst initialPost = {\n    // id: 0, user_info: {     user_name: \"mean0\",     user_profile:\n    // \"https://likerdo-bucket-list.s3.ap-northeast-2.amazonaws.com/yui.jpg\" },\n    image_url: \"https://likerdo-bucket-list.s3.ap-northeast-2.amazonaws.com/yui.jpg\",\n    contents: \"\",\n    comment_cnt: 0,\n    insert_dt: moment().format(\"YYYY-MM-DD hh:mm:ss\")\n}\n\nconst addPostFB = (contents = \"\",) => {\n    return function (dispatch, getState, {history}) {\n        const postDB = firestore.collection(\"post\");\n\n        const _user = getState().user.user;\n\n        const user_info = {\n            user_name: _user.user_name,\n            user_id: _user.uid,\n            user_profile: _user.user_profile\n        }\n        const _post = {\n            ...initialPost,\n            contents: contents,\n            insert_dt: moment().format(\"YYYY-MM-DD hh:mm:ss\")\n        }\n\n        const _image = getState().image.preview;\n\n        console.log(_image);\n        console.log(typeof _image);\n\n        const _upload = storage\n            .ref(\n                `images/${user_info.user_id}_${new Date().getTime()}`\n            )\n            .putString(_image, \"data_url\");\n\n        _upload.then((snapshot) => {\n            snapshot\n                .ref\n                .getDownloadURL()\n                .then((url) => {\n                    // url을 확인해봐요!\n                    console.log(url);\n                    dispatch(imageActions.uploadImage(url));\n                    return url;\n                })\n                .then(url => {\n                    postDB\n                        .add({\n                            ...user_info,\n                            ..._post,\n                            image_url: url\n                        })\n                        .then((doc) => {\n                            let post = {\n                                user_info,\n                                ..._post,\n                                id: doc.id\n                            };\n                            dispatch(addPost(post));\n                            history.replace(\"/\");\n                            dispatch(imageActions.setPreview(null));\n                        })\n                        .catch((err) => {\n                            window.alert(\"앗! 포스트 작성에 문제가 있어요!\");\n                            console.log(\"작성에 실패\", err);\n                        })\n                    }).catcg((err) => {\n                        window.alert(\"앗! 이미지 업로드에 문제가 있어요!\");\n                        console.log(\"이미지 업로드에 문제\", err);\n                    })\n        })\n\n    }\n}\n\nconst getPostFB = () => {\n    return function (dispatch, getState, {history}) {\n        const postDB = firestore.collection(\"post\");\n\n        postDB\n            .get()\n            .then((docs) => {\n                let post_list = [];\n                docs.forEach((doc) => {\n                    let _post = doc.data();\n\n                    // ['commenct_cnt', 'contents', ..] reduce 함수 공부 /3-3강 18분 설명\n                    let post = Object\n                        .keys(_post)\n                        .reduce((acc, cur) => {\n\n                            if (cur.indexOf(\"user_\") !== -1) {\n                                return {\n                                    ...acc,\n                                    user_info: {\n                                        ...acc.user_info,\n                                        [cur]: _post[cur]\n                                    }\n                                };\n                            }\n                            return {\n                                ...acc,\n                                [cur]: _post[cur]\n                            }\n                        }, {\n                            id: doc.id,\n                            user_info: {}\n                        });\n\n                    // let _post = {     id: doc.id,     ...doc.data() }; let post = {     id:\n                    // doc.id,     user_info: {         user_name: _post.user_name, user_profile:\n                    // _post.user_profile,         user_id: _post.user_id,     }, image_url:\n                    // _post.image_url,     contents: _post.contents,     comment_cnt:\n                    // _post.comment_cnt,     insert_dt: _post.insert_dt, }; post_list.push(post);\n                    post_list.push(post);\n                })\n                console.log(post_list);\n\n                dispatch(setPost(post_list));\n            })\n    }\n}\n\n// reducer draft 검색하기\nexport default handleActions({\n    [SET_POST]: (state, action) => produce(state, (draft) => {\n        draft.list = action.payload.post_list;\n    }),\n\n    [ADD_POST]: (state, action) => produce(state, (draft) => {\n        draft\n            .list\n            .unshift(action.payload.post)\n    })\n}, initialState);\n\n// action creator export\nconst actionCreators = {\n    setPost,\n    addPost,\n    getPostFB,\n    addPostFB\n};\n\nexport {\n    actionCreators\n};"]},"metadata":{},"sourceType":"module"}