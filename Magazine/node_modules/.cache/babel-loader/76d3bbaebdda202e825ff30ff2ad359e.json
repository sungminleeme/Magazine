{"ast":null,"code":"var _jsxFileName = \"/Users/a111/Desktop/\\u1106\\u116E\\u110C\\u1166 \\u1111\\u1169\\u11AF\\u1103\\u1165 2/image-community /src/pages/PostList.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport Post from \"../components/Post\";\nimport { actionCreators as postActions } from \"../redux/modules/post\";\nimport InfinityScroll from \"../shared/InfinityScroll\";\nimport { Grid } from \"../elements/Grid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PostList = props => {\n  _s();\n\n  const dispatch = useDispatch();\n  const post_list = useSelector(state => state.post.list);\n  const user_info = useSelector(state => state.user.user);\n  const is_loading = useSelector(state => state.post.is_loading);\n  const paging = useSelector(state => state.post.paging);\n  const {\n    history\n  } = props;\n  React.useEffect(() => {\n    if (post_list.length === 0) {\n      dispatch(postActions.getPostFB());\n    }\n  }, []); //빈배열이 들어가야 처음에 한번\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: /*#__PURE__*/_jsxDEV(InfinityScroll, {\n      callNext: () => {\n        dispatch(postActions.getPostFB(paging.next));\n      },\n      is_next: paging.next ? true : false,\n      loading: is_loading,\n      children: post_list.map((p, idx) => {\n        if (p.user_info.user_id === (user_info === null || user_info === void 0 ? void 0 : user_info.uid)) {\n          return /*#__PURE__*/_jsxDEV(Grid, {\n            _onClick: () => {\n              history.push(`/post/${p.id}`);\n            },\n            children: /*#__PURE__*/_jsxDEV(Post, { ...p,\n              is_me: \"is_me\"\n            }, p.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 45,\n              columnNumber: 33\n            }, this)\n          }, p.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 29\n          }, this);\n        } else {\n          return /*#__PURE__*/_jsxDEV(Grid, {\n            _onClick: () => {\n              history.push(`/post/${p.id}`);\n            },\n            children: /*#__PURE__*/_jsxDEV(Post, { ...p\n            }, p.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 51,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 29\n          }, this);\n        }\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 9\n  }, this);\n};\n\n_s(PostList, \"Z1NBbvDwQ3UlvEK5/PNDqnmDgb0=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = PostList;\nexport default PostList;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostList\");","map":{"version":3,"sources":["/Users/a111/Desktop/무제 폴더 2/image-community /src/pages/PostList.js"],"names":["React","useSelector","useDispatch","Post","actionCreators","postActions","InfinityScroll","Grid","PostList","props","dispatch","post_list","state","post","list","user_info","user","is_loading","paging","history","useEffect","length","getPostFB","next","map","p","idx","user_id","uid","push","id"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,WAAR,EAAqBC,WAArB,QAAuC,aAAvC;AAEA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,SAAQC,cAAc,IAAIC,WAA1B,QAA4C,uBAA5C;AACA,OAAOC,cAAP,MAA2B,0BAA3B;AACA,SAAQC,IAAR,QAAmB,kBAAnB;;;AAEA,MAAMC,QAAQ,GAAIC,KAAD,IAAW;AAAA;;AACxB,QAAMC,QAAQ,GAAGR,WAAW,EAA5B;AACA,QAAMS,SAAS,GAAGV,WAAW,CAAEW,KAAD,IAAWA,KAAK,CAACC,IAAN,CAAWC,IAAvB,CAA7B;AACA,QAAMC,SAAS,GAAGd,WAAW,CAAEW,KAAD,IAAWA,KAAK,CAACI,IAAN,CAAWA,IAAvB,CAA7B;AACA,QAAMC,UAAU,GAAGhB,WAAW,CAAEW,KAAD,IAAWA,KAAK,CAACC,IAAN,CAAWI,UAAvB,CAA9B;AACA,QAAMC,MAAM,GAAGjB,WAAW,CAAEW,KAAD,IAAWA,KAAK,CAACC,IAAN,CAAWK,MAAvB,CAA1B;AAGA,QAAM;AAACC,IAAAA;AAAD,MAAYV,KAAlB;AAEAT,EAAAA,KAAK,CAACoB,SAAN,CAAgB,MAAM;AAClB,QAAIT,SAAS,CAACU,MAAV,KAAqB,CAAzB,EAA4B;AACxBX,MAAAA,QAAQ,CAACL,WAAW,CAACiB,SAAZ,EAAD,CAAR;AACH;AAEJ,GALD,EAKG,EALH,EAVwB,CAgBxB;;AACA,sBACI,QAAC,KAAD,CAAO,QAAP;AAAA,2BAEI,QAAC,cAAD;AACI,MAAA,QAAQ,EAAE,MAAK;AACXZ,QAAAA,QAAQ,CAACL,WAAW,CAACiB,SAAZ,CAAsBJ,MAAM,CAACK,IAA7B,CAAD,CAAR;AACH,OAHL;AAII,MAAA,OAAO,EAAEL,MAAM,CAACK,IAAP,GAAa,IAAb,GAAoB,KAJjC;AAKI,MAAA,OAAO,EAAEN,UALb;AAAA,gBAQIN,SAAS,CAACa,GAAV,CAAc,CAACC,CAAD,EAAIC,GAAJ,KAAY;AAEtB,YACID,CAAC,CAACV,SAAF,CAAYY,OAAZ,MAAwBZ,SAAxB,aAAwBA,SAAxB,uBAAwBA,SAAS,CAC3Ba,GADN,CADJ,EAGE;AACE,8BACI,QAAC,IAAD;AAAiB,YAAA,QAAQ,EAAE,MAAM;AAACT,cAAAA,OAAO,CAACU,IAAR,CAAc,SAAQJ,CAAC,CAACK,EAAG,EAA3B;AAA8B,aAAhE;AAAA,mCACI,QAAC,IAAD,OAAsBL,CAAtB;AAAyB,cAAA,KAAK,EAAC;AAA/B,eAAYA,CAAC,CAACK,EAAd;AAAA;AAAA;AAAA;AAAA;AADJ,aAAWL,CAAC,CAACK,EAAb;AAAA;AAAA;AAAA;AAAA,kBADJ;AAKH,SATD,MASO;AACH,8BACI,QAAC,IAAD;AAAM,YAAA,QAAQ,EAAE,MAAM;AAACX,cAAAA,OAAO,CAACU,IAAR,CAAc,SAAQJ,CAAC,CAACK,EAAG,EAA3B;AAA8B,aAArD;AAAA,mCACI,QAAC,IAAD,OAAqBL;AAArB,eAAWA,CAAC,CAACK,EAAb;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,kBADJ;AAKH;AAEJ,OAnBD;AARJ;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAmCH,CApDD;;GAAMtB,Q;UACeN,W,EACCD,W,EACAA,W,EACCA,W,EACJA,W;;;KALbO,Q;AAsDN,eAAeA,QAAf","sourcesContent":["import React from \"react\";\nimport {useSelector, useDispatch} from \"react-redux\";\n\nimport Post from \"../components/Post\";\nimport {actionCreators as postActions} from \"../redux/modules/post\";\nimport InfinityScroll from \"../shared/InfinityScroll\";\nimport {Grid} from \"../elements/Grid\";\n\nconst PostList = (props) => {\n    const dispatch = useDispatch();\n    const post_list = useSelector((state) => state.post.list);\n    const user_info = useSelector((state) => state.user.user);\n    const is_loading = useSelector((state) => state.post.is_loading);\n    const paging = useSelector((state) => state.post.paging);\n\n\n    const {history} = props;\n\n    React.useEffect(() => {\n        if (post_list.length === 0) {\n            dispatch(postActions.getPostFB());\n        }\n\n    }, []);\n    //빈배열이 들어가야 처음에 한번\n    return (\n        <React.Fragment>\n            {/* <Post/> */}\n            <InfinityScroll\n                callNext={() =>{\n                    dispatch(postActions.getPostFB(paging.next));\n                }}\n                is_next={paging.next? true : false}\n                loading={is_loading}\n                >\n            {\n                post_list.map((p, idx) => {\n                    \n                    if (\n                        p.user_info.user_id === user_info\n                            ?.uid\n                    ) {\n                        return (\n                            <Grid key={p.id} _onClick={() => {history.push(`/post/${p.id}`)}}>\n                                <Post  key={p.id} {...p} is_me=\"is_me\"/>\n                            </Grid>\n                        );\n                    } else {\n                        return (\n                            <Grid _onClick={() => {history.push(`/post/${p.id}`)}}>\n                                <Post key={p.id} {...p}/>\n                            </Grid>\n                        );\n                    }\n\n                })}\n            </InfinityScroll>\n            \n        </React.Fragment>\n    )\n}\n\nexport default PostList;"]},"metadata":{},"sourceType":"module"}