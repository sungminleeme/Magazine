{"ast":null,"code":"import { createAction, handleActions } from \"redux-actions\";\nimport { produce } from \"immer\";\nimport { firestore } from \"../../shared/firebase\";\nimport \"moment\";\nimport moment from \"moment\";\nimport { identity } from 'lodash';\nconst SET_COMMENT = \"SET_COMMENT\";\nconst ADD_COMMENT = \"ADD_COMMENT\";\nconst LOADING = \"LOADING\";\nconst setComment = createAction(SET_COMMENT, (post_id, comment_list) => ({\n  post_id,\n  comment_list\n}));\nconst addComment = createAction(ADD_COMMENT, (post_id, comment) => ({\n  post_id,\n  comment\n}));\nconst loading = createAction(LOADING, is_loading => ({\n  is_loading\n}));\nconst initialState = {\n  list: {},\n  is_loading: false\n};\n\nconst getCommentFB = post_id => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    if (!post_id) {\n      return;\n    }\n\n    const commentDB = firestore.collection(\"comment\");\n    commentDB.where(\"post-id\", \"==\", post_id).orderBy(\"insert_dt\", \"desc\").get().then(docs => {\n      let list = [];\n      docs.forEach(doc => {\n        list.push({ ...doc.data(),\n          id: doc.id\n        });\n      });\n      dispatch(setComment(post_id, list));\n    }).catch(err => {\n      console.log('댓글 정보를 가져올 수가 없네요!');\n    });\n  };\n};\n\nexport default handleActions({\n  [SET_COMMENT]: (state, action) => produce(state, draft => {}),\n  [ADD_COMMENT]: (state, action) => produce(state, draft => {}),\n  [LOADING]: (state, action) => produce(state, draft => {\n    draft.is_loading = action.payload.is_loading;\n  })\n}, initialState);\nconst actionCreators = {\n  getCommentFB,\n  setComment,\n  addComment\n};\nexport { actionCreators };","map":{"version":3,"sources":["/Users/a111/Desktop/무제 폴더 2/image-community /src/redux/modules/comment.js"],"names":["createAction","handleActions","produce","firestore","moment","identity","SET_COMMENT","ADD_COMMENT","LOADING","setComment","post_id","comment_list","addComment","comment","loading","is_loading","initialState","list","getCommentFB","dispatch","getState","history","commentDB","collection","where","orderBy","get","then","docs","forEach","doc","push","data","id","catch","err","console","log","state","action","draft","payload","actionCreators"],"mappings":"AAAA,SAAQA,YAAR,EAAsBC,aAAtB,QAA0C,eAA1C;AACA,SAAQC,OAAR,QAAsB,OAAtB;AACA,SAAQC,SAAR,QAAwB,uBAAxB;AACA,OAAO,QAAP;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,SAAQC,QAAR,QAAuB,QAAvB;AAEA,MAAMC,WAAW,GAAG,aAApB;AACA,MAAMC,WAAW,GAAG,aAApB;AAEA,MAAMC,OAAO,GAAG,SAAhB;AAEA,MAAMC,UAAU,GAAGT,YAAY,CAC3BM,WAD2B,EAE3B,CAACI,OAAD,EAAUC,YAAV,MAA4B;AAACD,EAAAA,OAAD;AAAUC,EAAAA;AAAV,CAA5B,CAF2B,CAA/B;AAIA,MAAMC,UAAU,GAAGZ,YAAY,CAC3BO,WAD2B,EAE3B,CAACG,OAAD,EAAUG,OAAV,MAAuB;AAACH,EAAAA,OAAD;AAAUG,EAAAA;AAAV,CAAvB,CAF2B,CAA/B;AAKA,MAAMC,OAAO,GAAGd,YAAY,CAACQ,OAAD,EAAWO,UAAD,KAAiB;AAACA,EAAAA;AAAD,CAAjB,CAAV,CAA5B;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,IAAI,EAAE,EADW;AAEjBF,EAAAA,UAAU,EAAE;AAFK,CAArB;;AAKA,MAAMG,YAAY,GAAIR,OAAD,IAAa;AAC9B,SAAO,UAAUS,QAAV,EAAoBC,QAApB,EAA8B;AAACC,IAAAA;AAAD,GAA9B,EAAyC;AAC5C,QAAI,CAACX,OAAL,EAAc;AACV;AACH;;AACD,UAAMY,SAAS,GAAGnB,SAAS,CAACoB,UAAV,CAAqB,SAArB,CAAlB;AAEAD,IAAAA,SAAS,CACJE,KADL,CACW,SADX,EACsB,IADtB,EAC4Bd,OAD5B,EAEKe,OAFL,CAEa,WAFb,EAE0B,MAF1B,EAGKC,GAHL,GAIKC,IAJL,CAIWC,IAAD,IAAS;AACb,UAAIX,IAAI,GAAG,EAAX;AAEAW,MAAAA,IAAI,CAACC,OAAL,CAAcC,GAAD,IAAQ;AACnBb,QAAAA,IAAI,CAACc,IAAL,CAAU,EAAC,GAAGD,GAAG,CAACE,IAAJ,EAAJ;AAAgBC,UAAAA,EAAE,EAACH,GAAG,CAACG;AAAvB,SAAV;AACD,OAFD;AAIAd,MAAAA,QAAQ,CAACV,UAAU,CAACC,OAAD,EAAUO,IAAV,CAAX,CAAR;AACD,KAZL,EAYOiB,KAZP,CAYaC,GAAG,IAAG;AACbC,MAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACD,KAdL;AAeH,GArBD;AAsBH,CAvBD;;AAyBA,eAAepC,aAAa,CAAC;AACzB,GAACK,WAAD,GAAe,CAACgC,KAAD,EAAQC,MAAR,KAAmBrC,OAAO,CAACoC,KAAD,EAASE,KAAD,IAAW,CAAE,CAArB,CADhB;AAEzB,GAACjC,WAAD,GAAe,CAAC+B,KAAD,EAAQC,MAAR,KAAmBrC,OAAO,CAACoC,KAAD,EAASE,KAAD,IAAW,CAAE,CAArB,CAFhB;AAGzB,GAAChC,OAAD,GAAW,CAAC8B,KAAD,EAAQC,MAAR,KAAmBrC,OAAO,CAACoC,KAAD,EAASE,KAAD,IAAW;AACpDA,IAAAA,KAAK,CAACzB,UAAN,GAAmBwB,MAAM,CAACE,OAAP,CAAe1B,UAAlC;AACH,GAFoC;AAHZ,CAAD,EAMzBC,YANyB,CAA5B;AAQA,MAAM0B,cAAc,GAAG;AACnBxB,EAAAA,YADmB;AAEnBT,EAAAA,UAFmB;AAGnBG,EAAAA;AAHmB,CAAvB;AAMA,SACI8B,cADJ","sourcesContent":["import {createAction, handleActions} from \"redux-actions\";\nimport {produce} from \"immer\";\nimport {firestore} from \"../../shared/firebase\";\nimport \"moment\";\nimport moment from \"moment\";\nimport {identity} from 'lodash';\n\nconst SET_COMMENT = \"SET_COMMENT\";\nconst ADD_COMMENT = \"ADD_COMMENT\";\n\nconst LOADING = \"LOADING\";\n\nconst setComment = createAction(\n    SET_COMMENT,\n    (post_id, comment_list) => ({post_id, comment_list})\n);\nconst addComment = createAction(\n    ADD_COMMENT,\n    (post_id, comment) => ({post_id, comment})\n);\n\nconst loading = createAction(LOADING, (is_loading) => ({is_loading}));\n\nconst initialState = {\n    list: {},\n    is_loading: false\n};\n\nconst getCommentFB = (post_id) => {\n    return function (dispatch, getState, {history}) {\n        if (!post_id) {\n            return;\n        }\n        const commentDB = firestore.collection(\"comment\");\n\n        commentDB\n            .where(\"post-id\", \"==\", post_id)\n            .orderBy(\"insert_dt\", \"desc\")\n            .get()\n            .then((docs) =>{\n              let list = [];\n\n              docs.forEach((doc) =>{\n                list.push({...doc.data(), id:doc.id})\n              })\n\n              dispatch(setComment(post_id, list))\n            }).catch(err =>{\n              console.log('댓글 정보를 가져올 수가 없네요!')\n            })\n    }\n}\n\nexport default handleActions({\n    [SET_COMMENT]: (state, action) => produce(state, (draft) => {}),\n    [ADD_COMMENT]: (state, action) => produce(state, (draft) => {}),\n    [LOADING]: (state, action) => produce(state, (draft) => {\n        draft.is_loading = action.payload.is_loading;\n    })\n}, initialState);\n\nconst actionCreators = {\n    getCommentFB,\n    setComment,\n    addComment\n};\n\nexport {\n    actionCreators\n};"]},"metadata":{},"sourceType":"module"}