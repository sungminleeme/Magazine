{"ast":null,"code":"import { createAction, handleActions } from \"redux-actions\";\nimport { produce } from \"immer\";\nimport { firestore, realtime } from \"../../shared/firebase\";\nimport \"moment\";\nimport moment from \"moment\";\nimport firebase from \"firebase/app\";\nimport { actionCreators as postActions } from \"./post\";\nconst SET_COMMENT = \"SET_COMMENT\";\nconst ADD_COMMENT = \"ADD_COMMENT\";\nconst LOADING = \"LOADING\";\nconst setComment = createAction(SET_COMMENT, (post_id, comment_list) => ({\n  post_id,\n  comment_list\n}));\nconst addComment = createAction(ADD_COMMENT, (post_id, comment) => ({\n  post_id,\n  comment\n}));\nconst loading = createAction(LOADING, is_loading => ({\n  is_loading\n}));\nconst initialState = {\n  list: {},\n  is_loading: false\n};\n\nconst addCommentFB = (post_id, contents) => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    const commentDB = firestore.collection(\"comment\");\n    const user_info = getState().user.user;\n    let comment = {\n      post_id: post_id,\n      user_id: user_info.uid,\n      user_name: user_info.user_name,\n      user_profile: user_info.user_profile,\n      contents: contents,\n      insert_dt: moment().format(\"YYYY-MM-DD hh:mm:ss\")\n    };\n    commentDB.add(comment).then(doc => {\n      const postDB = firestore.collection(\"post\");\n      const post = getState().post.list.find(l => l.id === post_id);\n      const increment = firebase.firestore.FieldValue.increment(1);\n      comment = { ...comment,\n        id: doc.id\n      };\n      postDB.doc(post_id).update({\n        comment_cnt: increment\n      }).then(_post => {\n        dispatch(addComment(post_id, comment));\n\n        if (post) {\n          dispatch(postActions.editPost(post_id, {\n            comment_cnt: parseInt(post.comment_cnt) + 1\n          }));\n          const notiDB = realtime.ref(`noti/${post.user_info.user_id}/list`).push();\n          notiDB.set({\n            post_id: post.id,\n            user_name: comment.user_name,\n            image_url: post.image_url,\n            insert_dt: comment.insert_dt\n          }, err => {\n            if (err) {\n              console.log(\"알림 저장에 실패했어요! 8ㅛ8\");\n            } else {\n              const notiDB = realtime.ref(`noti/${post.user_info.user_id}`);\n              notiDB.update({\n                read: false\n              });\n            }\n          });\n        }\n      });\n    });\n  };\n};\n\nconst getCommentFB = (post_id = null) => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    if (!post_id) {\n      return;\n    }\n\n    const commentDB = firestore.collection(\"comment\");\n    commentDB.where(\"post_id\", \"==\", post_id).orderBy(\"insert_dt\", \"desc\").get().then(docs => {\n      let list = [];\n      docs.forEach(doc => {\n        list.push({ ...doc.data(),\n          id: doc.id\n        });\n      });\n      dispatch(setComment(post_id, list));\n    }).catch(err => {\n      console.log(\"댓글 정보를 가져올 수가 없네요!\", err);\n    });\n  };\n};\n\nexport default handleActions({\n  [SET_COMMENT]: (state, action) => produce(state, draft => {\n    draft.list[action.payload.post_id] = action.payload.comment_list;\n  }),\n  [ADD_COMMENT]: (state, action) => produce(state, draft => {\n    draft.list[action.payload.post_id].unshift(action.payload.comment);\n  }),\n  [LOADING]: (state, action) => produce(state, draft => {\n    draft.is_loading = action.payload.is_loading;\n  })\n}, initialState);\nconst actionCreators = {\n  getCommentFB,\n  addCommentFB,\n  setComment,\n  addComment\n};\nexport { actionCreators };","map":{"version":3,"sources":["/Users/a111/Desktop/무제 폴더 2/image-community /src/redux/modules/comment.js"],"names":["createAction","handleActions","produce","firestore","realtime","moment","firebase","actionCreators","postActions","SET_COMMENT","ADD_COMMENT","LOADING","setComment","post_id","comment_list","addComment","comment","loading","is_loading","initialState","list","addCommentFB","contents","dispatch","getState","history","commentDB","collection","user_info","user","user_id","uid","user_name","user_profile","insert_dt","format","add","then","doc","postDB","post","find","l","id","increment","FieldValue","update","comment_cnt","_post","editPost","parseInt","notiDB","ref","push","set","image_url","err","console","log","read","getCommentFB","where","orderBy","get","docs","forEach","data","catch","state","action","draft","payload","unshift"],"mappings":"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","sourcesContent":["import { createAction, handleActions } from \"redux-actions\";\nimport { produce } from \"immer\";\nimport { firestore, realtime } from \"../../shared/firebase\";\nimport \"moment\";\nimport moment from \"moment\";\n\nimport firebase from \"firebase/app\";\n\nimport { actionCreators as postActions } from \"./post\";\n\nconst SET_COMMENT = \"SET_COMMENT\";\nconst ADD_COMMENT = \"ADD_COMMENT\";\n\nconst LOADING = \"LOADING\";\n\nconst setComment = createAction(SET_COMMENT, (post_id, comment_list) => ({\n  post_id,\n  comment_list,\n}));\nconst addComment = createAction(ADD_COMMENT, (post_id, comment) => ({\n  post_id,\n  comment,\n}));\n\nconst loading = createAction(LOADING, (is_loading) => ({ is_loading }));\n\nconst initialState = {\n  list: {},\n  is_loading: false,\n};\n\nconst addCommentFB = (post_id, contents) => {\n  return function (dispatch, getState, { history }) {\n    const commentDB = firestore.collection(\"comment\");\n    const user_info = getState().user.user;\n\n    let comment = {\n      post_id: post_id,\n      user_id: user_info.uid,\n      user_name: user_info.user_name,\n      user_profile: user_info.user_profile,\n      contents: contents,\n      insert_dt: moment().format(\"YYYY-MM-DD hh:mm:ss\"),\n    };\n\n    commentDB.add(comment).then((doc) => {\n      const postDB = firestore.collection(\"post\");\n\n      const post = getState().post.list.find((l) => l.id === post_id);\n\n      const increment = firebase.firestore.FieldValue.increment(1);\n\n      comment = {...comment, id: doc.id};\n      postDB\n        .doc(post_id)\n        .update({ comment_cnt: increment })\n        .then((_post) => {\n          \n          dispatch(addComment(post_id, comment));\n\n          if (post) {\n            dispatch(\n              postActions.editPost(post_id, {\n                comment_cnt: parseInt(post.comment_cnt) + 1,\n              })\n            );\n\n            const notiDB= realtime.ref(`noti/${post.user_info.user_id}/list`).push();\n\n            notiDB.set({\n              post_id: post.id,\n              user_name: comment.user_name,\n              image_url: post.image_url,\n              insert_dt: comment.insert_dt\n            }, (err) => {\n              if(err){\n                console.log(\"알림 저장에 실패했어요! 8ㅛ8\");\n              }else{\n                const notiDB = realtime.ref(`noti/${post.user_info.user_id}`);\n\n                notiDB.update({read: false});\n              }\n            });\n\n          }\n        });\n    });\n  };\n};\n\nconst getCommentFB = (post_id = null) => {\n  return function (dispatch, getState, { history }) {\n    if (!post_id) {\n      return;\n    }\n\n    const commentDB = firestore.collection(\"comment\");\n\n    commentDB\n      .where(\"post_id\", \"==\", post_id)\n      .orderBy(\"insert_dt\", \"desc\")\n      .get()\n      .then((docs) => {\n        let list = [];\n\n        docs.forEach((doc) => {\n          list.push({ ...doc.data(), id: doc.id });\n        });\n\n        dispatch(setComment(post_id, list));\n      })\n      .catch((err) => {\n        console.log(\"댓글 정보를 가져올 수가 없네요!\", err);\n      });\n  };\n};\n\nexport default handleActions(\n  {\n    [SET_COMMENT]: (state, action) =>\n      produce(state, (draft) => {\n        draft.list[action.payload.post_id] = action.payload.comment_list;\n      }),\n    [ADD_COMMENT]: (state, action) => produce(state, (draft) => {\n      draft.list[action.payload.post_id].unshift(action.payload.comment);\n    }),\n    [LOADING]: (state, action) =>\n      produce(state, (draft) => {\n        draft.is_loading = action.payload.is_loading;\n      }),\n  },\n  initialState\n);\n\nconst actionCreators = {\n  getCommentFB,\n  addCommentFB,\n  setComment,\n  addComment,\n};\n\nexport { actionCreators };\n"]},"metadata":{},"sourceType":"module"}